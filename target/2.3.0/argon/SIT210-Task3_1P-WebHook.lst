
f:/Particle_Projects/SIT210-Task3_1P-WebHook/target/2.3.0/argon/SIT210-Task3_1P-WebHook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ec4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5ee0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e52c  000d5ee4  0001e52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000254  2003e59c  2003e59c  0002e59c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5f54  000d5f54  00025f54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5f7c  000d5f7c  00025f7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00142db0  00000000  00000000  00025f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000158a2  00000000  00000000  00168d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028fd1  00000000  00000000  0017e5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025a0  00000000  00000000  001a75a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007238  00000000  00000000  001a9b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037603  00000000  00000000  001b0d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000357ee  00000000  00000000  001e837e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010851c  00000000  00000000  0021db6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000066bc  00000000  00000000  00326088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd9d 	bl	d5b6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fda5 	bl	d5b88 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e52c 	.word	0x2003e52c
   d4048:	000d5ee4 	.word	0x000d5ee4
   d404c:	2003e59c 	.word	0x2003e59c
   d4050:	2003e59c 	.word	0x2003e59c
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fd55 	bl	d4b0c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5eb8 	.word	0x000d5eb8
   d407c:	000d5edc 	.word	0x000d5edc

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b888 	b.w	d4194 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f89f 	bl	d41c8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bcf5 	b.w	d4a7c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 baf5 	b.w	d4680 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 baf3 	b.w	d4680 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 baf9 	b.w	d4690 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   d40ae:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   d40b0:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   d40b2:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   d40b4:	7002      	strb	r2, [r0, #0]
}
   d40b6:	4770      	bx	lr

000d40b8 <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   d40bc:	6840      	ldr	r0, [r0, #4]
   d40be:	f001 f9f2 	bl	d54a6 <_ZN7TwoWire9isEnabledEv>
   d40c2:	b910      	cbnz	r0, d40ca <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   d40c4:	6860      	ldr	r0, [r4, #4]
   d40c6:	f001 f9b1 	bl	d542c <_ZN7TwoWire5beginEv>
  }

  return true;
}
   d40ca:	2001      	movs	r0, #1
   d40cc:	bd10      	pop	{r4, pc}
	...

000d40d0 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   d40d0:	b570      	push	{r4, r5, r6, lr}
   d40d2:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   d40d4:	7841      	ldrb	r1, [r0, #1]
   d40d6:	6840      	ldr	r0, [r0, #4]
   d40d8:	f001 f9da 	bl	d5490 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   d40dc:	7869      	ldrb	r1, [r5, #1]
   d40de:	6868      	ldr	r0, [r5, #4]
   d40e0:	2202      	movs	r2, #2
   d40e2:	f001 f9d2 	bl	d548a <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d40e6:	6868      	ldr	r0, [r5, #4]
   d40e8:	6803      	ldr	r3, [r0, #0]
   d40ea:	695b      	ldr	r3, [r3, #20]
   d40ec:	4798      	blx	r3
   d40ee:	4606      	mov	r6, r0
   d40f0:	6868      	ldr	r0, [r5, #4]
   d40f2:	6803      	ldr	r3, [r0, #0]
   d40f4:	695b      	ldr	r3, [r3, #20]
   d40f6:	4798      	blx	r3
   d40f8:	4604      	mov	r4, r0
  m_i2c.endTransmission();
   d40fa:	6868      	ldr	r0, [r5, #4]
   d40fc:	f001 f9d0 	bl	d54a0 <_ZN7TwoWire15endTransmissionEv>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   d4100:	ea44 2006 	orr.w	r0, r4, r6, lsl #8

  return (float)level / 1.2f; // convert to lux
   d4104:	b284      	uxth	r4, r0
   d4106:	ee07 4a90 	vmov	s15, r4
   d410a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
   d410e:	eddf 7a02 	vldr	s15, [pc, #8]	; d4118 <_ZN6BH175015get_light_levelEv+0x48>
   d4112:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4116:	bd70      	pop	{r4, r5, r6, pc}
   d4118:	3f99999a 	.word	0x3f99999a

000d411c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   d411c:	7803      	ldrb	r3, [r0, #0]
   d411e:	2b23      	cmp	r3, #35	; 0x23
   d4120:	d005      	beq.n	d412e <_ZN6BH175020wait_for_measurementEv+0x12>
   d4122:	2b13      	cmp	r3, #19
   d4124:	bf0c      	ite	eq
   d4126:	2018      	moveq	r0, #24
   d4128:	20b4      	movne	r0, #180	; 0xb4
   d412a:	f000 bc61 	b.w	d49f0 <delay>
   d412e:	2018      	movs	r0, #24
   d4130:	e7fb      	b.n	d412a <_ZN6BH175020wait_for_measurementEv+0xe>

000d4132 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   d4132:	b538      	push	{r3, r4, r5, lr}
   d4134:	4604      	mov	r4, r0
   d4136:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   d4138:	7841      	ldrb	r1, [r0, #1]
   d413a:	6840      	ldr	r0, [r0, #4]
   d413c:	f001 f9a8 	bl	d5490 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   d4140:	6860      	ldr	r0, [r4, #4]
   d4142:	6803      	ldr	r3, [r0, #0]
   d4144:	4629      	mov	r1, r5
   d4146:	689b      	ldr	r3, [r3, #8]
   d4148:	4798      	blx	r3
  m_i2c.endTransmission();
   d414a:	6860      	ldr	r0, [r4, #4]
   d414c:	f001 f9a8 	bl	d54a0 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   d4150:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   d4152:	4620      	mov	r0, r4
}
   d4154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   d4158:	f7ff bfe0 	b.w	d411c <_ZN6BH175020wait_for_measurementEv>

000d415c <_ZN6BH175023make_forced_measurementEv>:
{
   d415c:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
   d415e:	7803      	ldrb	r3, [r0, #0]
   d4160:	f1a3 0220 	sub.w	r2, r3, #32
   d4164:	2a01      	cmp	r2, #1
{
   d4166:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
   d4168:	d901      	bls.n	d416e <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
   d416a:	2b23      	cmp	r3, #35	; 0x23
   d416c:	d110      	bne.n	d4190 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
   d416e:	7861      	ldrb	r1, [r4, #1]
   d4170:	6860      	ldr	r0, [r4, #4]
   d4172:	f001 f98d 	bl	d5490 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
   d4176:	6860      	ldr	r0, [r4, #4]
   d4178:	7821      	ldrb	r1, [r4, #0]
   d417a:	6803      	ldr	r3, [r0, #0]
   d417c:	689b      	ldr	r3, [r3, #8]
   d417e:	4798      	blx	r3
    m_i2c.endTransmission();
   d4180:	6860      	ldr	r0, [r4, #4]
   d4182:	f001 f98d 	bl	d54a0 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
   d4186:	4620      	mov	r0, r4
}
   d4188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
   d418c:	f7ff bfc6 	b.w	d411c <_ZN6BH175020wait_for_measurementEv>
}
   d4190:	bd10      	pop	{r4, pc}
	...

000d4194 <setup>:
BH1750 sensor(0x23, Wire);
int led = D7;

SYSTEM_THREAD(ENABLED);

void setup() {
   d4194:	b510      	push	{r4, lr}
  pinMode(led, OUTPUT);
   d4196:	4b0a      	ldr	r3, [pc, #40]	; (d41c0 <setup+0x2c>)
  sensor.begin();
   d4198:	4c0a      	ldr	r4, [pc, #40]	; (d41c4 <setup+0x30>)
  pinMode(led, OUTPUT);
   d419a:	8818      	ldrh	r0, [r3, #0]
   d419c:	2101      	movs	r1, #1
   d419e:	f001 fab3 	bl	d5708 <pinMode>
  sensor.begin();
   d41a2:	4620      	mov	r0, r4
   d41a4:	f7ff ff88 	bl	d40b8 <_ZN6BH17505beginEv>
  sensor.set_sensor_mode(BH1750::forced_mode_high_res2);
   d41a8:	2121      	movs	r1, #33	; 0x21
   d41aa:	4620      	mov	r0, r4
   d41ac:	f7ff ffc1 	bl	d4132 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
  Serial.begin();
   d41b0:	f001 f84a 	bl	d5248 <_Z16_fetch_usbserialv>
}
   d41b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.begin();
   d41b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41bc:	f001 b838 	b.w	d5230 <_ZN9USBSerial5beginEl>
   d41c0:	2003e52c 	.word	0x2003e52c
   d41c4:	2003e5a0 	.word	0x2003e5a0

000d41c8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41c8:	b5d0      	push	{r4, r6, r7, lr}
   d41ca:	ed2d 8b02 	vpush	{d8}
  sensor.make_forced_measurement();
   d41ce:	482c      	ldr	r0, [pc, #176]	; (d4280 <loop+0xb8>)
void loop() {
   d41d0:	b088      	sub	sp, #32
  sensor.make_forced_measurement();
   d41d2:	f7ff ffc3 	bl	d415c <_ZN6BH175023make_forced_measurementEv>
  float lightLevel = sensor.get_light_level();
   d41d6:	482a      	ldr	r0, [pc, #168]	; (d4280 <loop+0xb8>)
   d41d8:	f7ff ff7a 	bl	d40d0 <_ZN6BH175015get_light_levelEv>
  Particle.publish("lightLevel", String::format("%f", lightLevel), PRIVATE);
   d41dc:	ee10 0a10 	vmov	r0, s0
  float lightLevel = sensor.get_light_level();
   d41e0:	eeb0 8a40 	vmov.f32	s16, s0
  Particle.publish("lightLevel", String::format("%f", lightLevel), PRIVATE);
   d41e4:	f001 fc64 	bl	d5ab0 <__aeabi_f2d>
   d41e8:	4602      	mov	r2, r0
   d41ea:	460b      	mov	r3, r1
   d41ec:	4606      	mov	r6, r0
   d41ee:	460f      	mov	r7, r1
   d41f0:	a804      	add	r0, sp, #16
   d41f2:	4924      	ldr	r1, [pc, #144]	; (d4284 <loop+0xbc>)
   d41f4:	f000 fb36 	bl	d4864 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d41f8:	4b23      	ldr	r3, [pc, #140]	; (d4288 <loop+0xc0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41fa:	9a04      	ldr	r2, [sp, #16]
   d41fc:	781b      	ldrb	r3, [r3, #0]
   d41fe:	f88d 3000 	strb.w	r3, [sp]
   d4202:	4922      	ldr	r1, [pc, #136]	; (d428c <loop+0xc4>)
   d4204:	233c      	movs	r3, #60	; 0x3c
   d4206:	a802      	add	r0, sp, #8
   d4208:	f000 fdd8 	bl	d4dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d420c:	9c03      	ldr	r4, [sp, #12]
   d420e:	b17c      	cbz	r4, d4230 <loop+0x68>
      if (--_M_use_count == 0)
   d4210:	6863      	ldr	r3, [r4, #4]
   d4212:	3b01      	subs	r3, #1
   d4214:	6063      	str	r3, [r4, #4]
   d4216:	b95b      	cbnz	r3, d4230 <loop+0x68>
          _M_dispose();
   d4218:	6823      	ldr	r3, [r4, #0]
   d421a:	4620      	mov	r0, r4
   d421c:	689b      	ldr	r3, [r3, #8]
   d421e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4220:	68a3      	ldr	r3, [r4, #8]
   d4222:	3b01      	subs	r3, #1
   d4224:	60a3      	str	r3, [r4, #8]
   d4226:	b91b      	cbnz	r3, d4230 <loop+0x68>
            _M_destroy();
   d4228:	6823      	ldr	r3, [r4, #0]
   d422a:	4620      	mov	r0, r4
   d422c:	68db      	ldr	r3, [r3, #12]
   d422e:	4798      	blx	r3
   d4230:	a804      	add	r0, sp, #16
   d4232:	f000 fab7 	bl	d47a4 <_ZN6StringD1Ev>
  Serial.println(String::format("Light Level: %f", lightLevel));
   d4236:	f001 f807 	bl	d5248 <_Z16_fetch_usbserialv>
   d423a:	4632      	mov	r2, r6
   d423c:	463b      	mov	r3, r7
   d423e:	4604      	mov	r4, r0
   d4240:	4913      	ldr	r1, [pc, #76]	; (d4290 <loop+0xc8>)
   d4242:	a804      	add	r0, sp, #16
   d4244:	f000 fb0e 	bl	d4864 <_ZN6String6formatEPKcz>
   d4248:	9904      	ldr	r1, [sp, #16]
   d424a:	4620      	mov	r0, r4
   d424c:	f000 fb95 	bl	d497a <_ZN5Print7printlnEPKc>
   d4250:	a804      	add	r0, sp, #16
   d4252:	f000 faa7 	bl	d47a4 <_ZN6StringD1Ev>
  if (lightLevel > 400) digitalWrite(led, LOW);
   d4256:	eddf 7a0f 	vldr	s15, [pc, #60]	; d4294 <loop+0xcc>
   d425a:	4b0f      	ldr	r3, [pc, #60]	; (d4298 <loop+0xd0>)
   d425c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  else digitalWrite(led, HIGH);
   d4264:	8818      	ldrh	r0, [r3, #0]
  if (lightLevel > 400) digitalWrite(led, LOW);
   d4266:	bfcc      	ite	gt
   d4268:	2100      	movgt	r1, #0
  else digitalWrite(led, HIGH);
   d426a:	2101      	movle	r1, #1
   d426c:	f001 fa5d 	bl	d572a <digitalWrite>
  delay(10000);
   d4270:	f242 7010 	movw	r0, #10000	; 0x2710
   d4274:	f000 fbbc 	bl	d49f0 <delay>
   d4278:	b008      	add	sp, #32
   d427a:	ecbd 8b02 	vpop	{d8}
   d427e:	bdd0      	pop	{r4, r6, r7, pc}
   d4280:	2003e5a0 	.word	0x2003e5a0
   d4284:	000d5d24 	.word	0x000d5d24
   d4288:	2003e59c 	.word	0x2003e59c
   d428c:	000d5d0c 	.word	0x000d5d0c
   d4290:	000d5d17 	.word	0x000d5d17
   d4294:	43c80000 	.word	0x43c80000
   d4298:	2003e52c 	.word	0x2003e52c

000d429c <_GLOBAL__sub_I_sensor>:
        val_(val) {
   d429c:	4b08      	ldr	r3, [pc, #32]	; (d42c0 <_GLOBAL__sub_I_sensor+0x24>)
   d429e:	b510      	push	{r4, lr}
   d42a0:	2401      	movs	r4, #1
   d42a2:	701c      	strb	r4, [r3, #0]
BH1750 sensor(0x23, Wire);
   d42a4:	f001 fa74 	bl	d5790 <_Z19__fetch_global_Wirev>
   d42a8:	2123      	movs	r1, #35	; 0x23
   d42aa:	4602      	mov	r2, r0
   d42ac:	4805      	ldr	r0, [pc, #20]	; (d42c4 <_GLOBAL__sub_I_sensor+0x28>)
   d42ae:	f7ff fefe 	bl	d40ae <_ZN6BH1750C1EhR7TwoWire>
SYSTEM_THREAD(ENABLED);
   d42b2:	4620      	mov	r0, r4
   d42b4:	2100      	movs	r1, #0
   d42b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   d42ba:	f000 b93d 	b.w	d4538 <system_thread_set_state>
   d42be:	bf00      	nop
   d42c0:	2003e59c 	.word	0x2003e59c
   d42c4:	2003e5a0 	.word	0x2003e5a0

000d42c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <netdb_freeaddrinfo+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	689b      	ldr	r3, [r3, #8]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030268 	.word	0x00030268

000d42d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <netdb_getaddrinfo+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	68db      	ldr	r3, [r3, #12]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030268 	.word	0x00030268

000d42e8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_Pin_Mode+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	689b      	ldr	r3, [r3, #8]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	0003022c 	.word	0x0003022c

000d42f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <HAL_Get_Pin_Mode+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	68db      	ldr	r3, [r3, #12]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	0003022c 	.word	0x0003022c

000d4308 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <HAL_GPIO_Write+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	691b      	ldr	r3, [r3, #16]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	0003022c 	.word	0x0003022c

000d4318 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <HAL_RNG_GetRandomNumber+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	685b      	ldr	r3, [r3, #4]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030218 	.word	0x00030218

000d4328 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	695b      	ldr	r3, [r3, #20]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030218 	.word	0x00030218

000d4338 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <os_mutex_recursive_create+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030248 	.word	0x00030248

000d4348 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <inet_inet_ntop+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	695b      	ldr	r3, [r3, #20]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030264 	.word	0x00030264

000d4358 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <hal_usart_init+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	681b      	ldr	r3, [r3, #0]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003023c 	.word	0x0003023c

000d4368 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <hal_usart_write+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	68db      	ldr	r3, [r3, #12]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003023c 	.word	0x0003023c

000d4378 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <hal_usart_available+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	691b      	ldr	r3, [r3, #16]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003023c 	.word	0x0003023c

000d4388 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <hal_usart_read+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	695b      	ldr	r3, [r3, #20]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003023c 	.word	0x0003023c

000d4398 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <hal_usart_peek+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	699b      	ldr	r3, [r3, #24]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003023c 	.word	0x0003023c

000d43a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <hal_usart_flush+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	69db      	ldr	r3, [r3, #28]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003023c 	.word	0x0003023c

000d43b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <hal_usart_is_enabled+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6a1b      	ldr	r3, [r3, #32]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003023c 	.word	0x0003023c

000d43c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <hal_usart_available_data_for_write+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003023c 	.word	0x0003023c

000d43d8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <hal_i2c_begin+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	68db      	ldr	r3, [r3, #12]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030228 	.word	0x00030228

000d43e8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <hal_i2c_begin_transmission+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	699b      	ldr	r3, [r3, #24]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030228 	.word	0x00030228

000d43f8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <hal_i2c_end_transmission+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	69db      	ldr	r3, [r3, #28]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030228 	.word	0x00030228

000d4408 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <hal_i2c_write+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6a1b      	ldr	r3, [r3, #32]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030228 	.word	0x00030228

000d4418 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <hal_i2c_available+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030228 	.word	0x00030228

000d4428 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <hal_i2c_read+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030228 	.word	0x00030228

000d4438 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <hal_i2c_peek+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030228 	.word	0x00030228

000d4448 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <hal_i2c_flush+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030228 	.word	0x00030228

000d4458 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <hal_i2c_is_enabled+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030228 	.word	0x00030228

000d4468 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <hal_i2c_init+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030228 	.word	0x00030228

000d4478 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <hal_i2c_request_ex+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030228 	.word	0x00030228

000d4488 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <hal_spi_init+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	69db      	ldr	r3, [r3, #28]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030230 	.word	0x00030230

000d4498 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <hal_spi_is_enabled+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6a1b      	ldr	r3, [r3, #32]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030230 	.word	0x00030230

000d44a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_USB_USART_Init+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	681b      	ldr	r3, [r3, #0]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003024c 	.word	0x0003024c

000d44b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_USB_USART_Begin+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	685b      	ldr	r3, [r3, #4]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003024c 	.word	0x0003024c

000d44c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_USB_USART_Available_Data+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	691b      	ldr	r3, [r3, #16]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003024c 	.word	0x0003024c

000d44d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003024c 	.word	0x0003024c

000d44e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_USB_USART_Receive_Data+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	699b      	ldr	r3, [r3, #24]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003024c 	.word	0x0003024c

000d44f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_USB_USART_Send_Data+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	69db      	ldr	r3, [r3, #28]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003024c 	.word	0x0003024c

000d4508 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_USB_USART_Flush_Data+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6a1b      	ldr	r3, [r3, #32]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003024c 	.word	0x0003024c

000d4518 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <set_system_mode+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030220 	.word	0x00030220

000d4528 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <system_delay_ms+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030220 	.word	0x00030220

000d4538 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <system_thread_set_state+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030220 	.word	0x00030220

000d4548 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <application_thread_current+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030220 	.word	0x00030220

000d4558 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <application_thread_invoke+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030220 	.word	0x00030220

000d4568 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b03      	ldr	r3, [pc, #12]	; (d4578 <system_ctrl_set_app_request_handler+0x10>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4572:	9301      	str	r3, [sp, #4]
   d4574:	bd08      	pop	{r3, pc}
   d4576:	0000      	.short	0x0000
   d4578:	00030220 	.word	0x00030220

000d457c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b03      	ldr	r3, [pc, #12]	; (d458c <system_ctrl_set_result+0x10>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4586:	9301      	str	r3, [sp, #4]
   d4588:	bd08      	pop	{r3, pc}
   d458a:	0000      	.short	0x0000
   d458c:	00030220 	.word	0x00030220

000d4590 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_connect+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	685b      	ldr	r3, [r3, #4]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_connecting+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	689b      	ldr	r3, [r3, #8]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <network_disconnect+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	68db      	ldr	r3, [r3, #12]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030240 	.word	0x00030240

000d45c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <network_ready+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	691b      	ldr	r3, [r3, #16]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030240 	.word	0x00030240

000d45d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <network_on+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	695b      	ldr	r3, [r3, #20]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030240 	.word	0x00030240

000d45e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_off+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	699b      	ldr	r3, [r3, #24]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_listen+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	69db      	ldr	r3, [r3, #28]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_listening+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6a1b      	ldr	r3, [r3, #32]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_set_listen_timeout+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <network_get_listen_timeout+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030240 	.word	0x00030240

000d4630 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <network_is_on+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030240 	.word	0x00030240

000d4640 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <network_is_off+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030240 	.word	0x00030240

000d4650 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <spark_cloud_flag_connected+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	695b      	ldr	r3, [r3, #20]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030244 	.word	0x00030244

000d4660 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <spark_send_event+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6a1b      	ldr	r3, [r3, #32]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030244 	.word	0x00030244

000d4670 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030244 	.word	0x00030244

000d4680 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <malloc+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	681b      	ldr	r3, [r3, #0]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	0003021c 	.word	0x0003021c

000d4690 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <free+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	685b      	ldr	r3, [r3, #4]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003021c 	.word	0x0003021c

000d46a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <realloc+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	689b      	ldr	r3, [r3, #8]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003021c 	.word	0x0003021c

000d46b0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <vsnprintf+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003021c 	.word	0x0003021c

000d46c0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <abort+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003021c 	.word	0x0003021c

000d46d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <_malloc_r+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003021c 	.word	0x0003021c

000d46e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <newlib_impure_ptr_callback+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003021c 	.word	0x0003021c

000d46f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46f0:	2200      	movs	r2, #0
   d46f2:	6840      	ldr	r0, [r0, #4]
   d46f4:	4611      	mov	r1, r2
   d46f6:	f7ff bf83 	b.w	d4600 <network_listening>

000d46fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d46fa:	2200      	movs	r2, #0
   d46fc:	6840      	ldr	r0, [r0, #4]
   d46fe:	4611      	mov	r1, r2
   d4700:	f7ff bf8e 	b.w	d4620 <network_get_listen_timeout>

000d4704 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4704:	6840      	ldr	r0, [r0, #4]
   d4706:	2200      	movs	r2, #0
   d4708:	f7ff bf82 	b.w	d4610 <network_set_listen_timeout>

000d470c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d470c:	6840      	ldr	r0, [r0, #4]
   d470e:	2200      	movs	r2, #0
   d4710:	f081 0101 	eor.w	r1, r1, #1
   d4714:	f7ff bf6c 	b.w	d45f0 <network_listen>

000d4718 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4718:	2300      	movs	r3, #0
   d471a:	6840      	ldr	r0, [r0, #4]
   d471c:	461a      	mov	r2, r3
   d471e:	4619      	mov	r1, r3
   d4720:	f7ff bf5e 	b.w	d45e0 <network_off>

000d4724 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4724:	2300      	movs	r3, #0
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	461a      	mov	r2, r3
   d472a:	4619      	mov	r1, r3
   d472c:	f7ff bf50 	b.w	d45d0 <network_on>

000d4730 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4730:	2200      	movs	r2, #0
   d4732:	6840      	ldr	r0, [r0, #4]
   d4734:	4611      	mov	r1, r2
   d4736:	f7ff bf43 	b.w	d45c0 <network_ready>

000d473a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d473a:	2200      	movs	r2, #0
   d473c:	6840      	ldr	r0, [r0, #4]
   d473e:	4611      	mov	r1, r2
   d4740:	f7ff bf2e 	b.w	d45a0 <network_connecting>

000d4744 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4744:	6840      	ldr	r0, [r0, #4]
   d4746:	2200      	movs	r2, #0
   d4748:	2102      	movs	r1, #2
   d474a:	f7ff bf31 	b.w	d45b0 <network_disconnect>

000d474e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d474e:	2300      	movs	r3, #0
   d4750:	6840      	ldr	r0, [r0, #4]
   d4752:	461a      	mov	r2, r3
   d4754:	f7ff bf1c 	b.w	d4590 <network_connect>

000d4758 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4758:	4b02      	ldr	r3, [pc, #8]	; (d4764 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d475a:	2203      	movs	r2, #3
   d475c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d475e:	4a02      	ldr	r2, [pc, #8]	; (d4768 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4760:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4762:	4770      	bx	lr
   d4764:	2003e5a8 	.word	0x2003e5a8
   d4768:	000d5d30 	.word	0x000d5d30

000d476c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d476c:	b510      	push	{r4, lr}
   d476e:	4604      	mov	r4, r0
   d4770:	4608      	mov	r0, r1
{
    _spi = spi;
   d4772:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4774:	f7ff fe88 	bl	d4488 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4778:	2300      	movs	r3, #0
   d477a:	6063      	str	r3, [r4, #4]
}
   d477c:	4620      	mov	r0, r4
   d477e:	bd10      	pop	{r4, pc}

000d4780 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4780:	4b05      	ldr	r3, [pc, #20]	; (d4798 <_GLOBAL__sub_I_System+0x18>)
   d4782:	2202      	movs	r2, #2
   d4784:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4786:	4b05      	ldr	r3, [pc, #20]	; (d479c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4788:	4a05      	ldr	r2, [pc, #20]	; (d47a0 <_GLOBAL__sub_I_System+0x20>)
   d478a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d478c:	2000      	movs	r0, #0
   d478e:	6018      	str	r0, [r3, #0]
   d4790:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4792:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4794:	f7ff bec0 	b.w	d4518 <set_system_mode>
   d4798:	2003e5bc 	.word	0x2003e5bc
   d479c:	2003e5b0 	.word	0x2003e5b0
   d47a0:	ffff0000 	.word	0xffff0000

000d47a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d47a4:	b510      	push	{r4, lr}
   d47a6:	4604      	mov	r4, r0
{
	free(buffer);
   d47a8:	6800      	ldr	r0, [r0, #0]
   d47aa:	f7ff ff71 	bl	d4690 <free>
}
   d47ae:	4620      	mov	r0, r4
   d47b0:	bd10      	pop	{r4, pc}

000d47b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d47b2:	b510      	push	{r4, lr}
   d47b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d47b6:	6800      	ldr	r0, [r0, #0]
   d47b8:	b108      	cbz	r0, d47be <_ZN6String10invalidateEv+0xc>
   d47ba:	f7ff ff69 	bl	d4690 <free>
	buffer = NULL;
   d47be:	2300      	movs	r3, #0
	capacity = len = 0;
   d47c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d47c4:	6023      	str	r3, [r4, #0]
}
   d47c6:	bd10      	pop	{r4, pc}

000d47c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d47c8:	b538      	push	{r3, r4, r5, lr}
   d47ca:	4604      	mov	r4, r0
   d47cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d47ce:	6800      	ldr	r0, [r0, #0]
   d47d0:	3101      	adds	r1, #1
   d47d2:	f7ff ff65 	bl	d46a0 <realloc>
	if (newbuffer) {
   d47d6:	b110      	cbz	r0, d47de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d47d8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d47dc:	2001      	movs	r0, #1
	}
	return 0;
}
   d47de:	bd38      	pop	{r3, r4, r5, pc}

000d47e0 <_ZN6String7reserveEj>:
{
   d47e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d47e2:	6803      	ldr	r3, [r0, #0]
{
   d47e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d47e6:	b123      	cbz	r3, d47f2 <_ZN6String7reserveEj+0x12>
   d47e8:	6843      	ldr	r3, [r0, #4]
   d47ea:	428b      	cmp	r3, r1
   d47ec:	d301      	bcc.n	d47f2 <_ZN6String7reserveEj+0x12>
   d47ee:	2001      	movs	r0, #1
}
   d47f0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d47f2:	4620      	mov	r0, r4
   d47f4:	f7ff ffe8 	bl	d47c8 <_ZN6String12changeBufferEj>
   d47f8:	2800      	cmp	r0, #0
   d47fa:	d0f9      	beq.n	d47f0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d47fc:	68a3      	ldr	r3, [r4, #8]
   d47fe:	2b00      	cmp	r3, #0
   d4800:	d1f5      	bne.n	d47ee <_ZN6String7reserveEj+0xe>
   d4802:	6822      	ldr	r2, [r4, #0]
   d4804:	7013      	strb	r3, [r2, #0]
   d4806:	e7f2      	b.n	d47ee <_ZN6String7reserveEj+0xe>

000d4808 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4808:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d480a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d480c:	4611      	mov	r1, r2
   d480e:	9201      	str	r2, [sp, #4]
{
   d4810:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4812:	f7ff ffe5 	bl	d47e0 <_ZN6String7reserveEj>
   d4816:	9a01      	ldr	r2, [sp, #4]
   d4818:	b928      	cbnz	r0, d4826 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff ffc9 	bl	d47b2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4820:	4620      	mov	r0, r4
   d4822:	b003      	add	sp, #12
   d4824:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4826:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4828:	4629      	mov	r1, r5
   d482a:	6820      	ldr	r0, [r4, #0]
   d482c:	f001 f99e 	bl	d5b6c <memcpy>
	buffer[len] = 0;
   d4830:	6822      	ldr	r2, [r4, #0]
   d4832:	68a3      	ldr	r3, [r4, #8]
   d4834:	2100      	movs	r1, #0
   d4836:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4838:	e7f2      	b.n	d4820 <_ZN6String4copyEPKcj+0x18>

000d483a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d483a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d483c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d483e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4842:	4604      	mov	r4, r0
	len = 0;
   d4844:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4846:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4848:	b141      	cbz	r1, d485c <_ZN6StringC1EPKc+0x22>
   d484a:	4608      	mov	r0, r1
   d484c:	9101      	str	r1, [sp, #4]
   d484e:	f001 f9e4 	bl	d5c1a <strlen>
   d4852:	9901      	ldr	r1, [sp, #4]
   d4854:	4602      	mov	r2, r0
   d4856:	4620      	mov	r0, r4
   d4858:	f7ff ffd6 	bl	d4808 <_ZN6String4copyEPKcj>
}
   d485c:	4620      	mov	r0, r4
   d485e:	b002      	add	sp, #8
   d4860:	bd10      	pop	{r4, pc}
	...

000d4864 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d4864:	b40e      	push	{r1, r2, r3}
   d4866:	b570      	push	{r4, r5, r6, lr}
   d4868:	b087      	sub	sp, #28
   d486a:	ad0b      	add	r5, sp, #44	; 0x2c
   d486c:	4604      	mov	r4, r0
   d486e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4872:	9201      	str	r2, [sp, #4]
   d4874:	462b      	mov	r3, r5
   d4876:	2105      	movs	r1, #5
   d4878:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d487a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d487c:	f7ff ff18 	bl	d46b0 <vsnprintf>
    va_end(marker);

    String result;
   d4880:	490b      	ldr	r1, [pc, #44]	; (d48b0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4882:	4606      	mov	r6, r0
    String result;
   d4884:	4620      	mov	r0, r4
   d4886:	f7ff ffd8 	bl	d483a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d488a:	4631      	mov	r1, r6
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff ffa7 	bl	d47e0 <_ZN6String7reserveEj>
    if (result.buffer) {
   d4892:	6820      	ldr	r0, [r4, #0]
   d4894:	b130      	cbz	r0, d48a4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4896:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d4898:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d489a:	462b      	mov	r3, r5
   d489c:	1c71      	adds	r1, r6, #1
   d489e:	f7ff ff07 	bl	d46b0 <vsnprintf>
        va_end(marker);
        result.len = n;
   d48a2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d48a4:	4620      	mov	r0, r4
   d48a6:	b007      	add	sp, #28
   d48a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d48ac:	b003      	add	sp, #12
   d48ae:	4770      	bx	lr
   d48b0:	000d5d83 	.word	0x000d5d83

000d48b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48b4:	b510      	push	{r4, lr}
          _M_dispose();
   d48b6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d48b8:	4604      	mov	r4, r0
          _M_dispose();
   d48ba:	689b      	ldr	r3, [r3, #8]
   d48bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d48be:	68a3      	ldr	r3, [r4, #8]
   d48c0:	3b01      	subs	r3, #1
   d48c2:	60a3      	str	r3, [r4, #8]
   d48c4:	b92b      	cbnz	r3, d48d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d48c6:	6823      	ldr	r3, [r4, #0]
   d48c8:	4620      	mov	r0, r4
   d48ca:	68db      	ldr	r3, [r3, #12]
    }
   d48cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d48d0:	4718      	bx	r3
    }
   d48d2:	bd10      	pop	{r4, pc}

000d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48d4:	680b      	ldr	r3, [r1, #0]
   d48d6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48d8:	b113      	cbz	r3, d48e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d48da:	685a      	ldr	r2, [r3, #4]
   d48dc:	3201      	adds	r2, #1
   d48de:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d48e0:	4770      	bx	lr

000d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d48e2:	b510      	push	{r4, lr}
   d48e4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d48e6:	6800      	ldr	r0, [r0, #0]
   d48e8:	b128      	cbz	r0, d48f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d48ea:	6843      	ldr	r3, [r0, #4]
   d48ec:	3b01      	subs	r3, #1
   d48ee:	6043      	str	r3, [r0, #4]
   d48f0:	b90b      	cbnz	r3, d48f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d48f2:	f7ff ffdf 	bl	d48b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d48f6:	4620      	mov	r0, r4
   d48f8:	bd10      	pop	{r4, pc}
	...

000d48fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48fc:	4802      	ldr	r0, [pc, #8]	; (d4908 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d48fe:	2300      	movs	r3, #0
   d4900:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4902:	f7ff bd19 	b.w	d4338 <os_mutex_recursive_create>
   d4906:	bf00      	nop
   d4908:	2003e5c0 	.word	0x2003e5c0

000d490c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d490e:	4606      	mov	r6, r0
   d4910:	460d      	mov	r5, r1
  size_t n = 0;
   d4912:	188f      	adds	r7, r1, r2
   d4914:	2400      	movs	r4, #0
  while (size--) {
   d4916:	42bd      	cmp	r5, r7
   d4918:	d00c      	beq.n	d4934 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d491a:	6833      	ldr	r3, [r6, #0]
   d491c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4920:	689b      	ldr	r3, [r3, #8]
   d4922:	4630      	mov	r0, r6
   d4924:	4798      	blx	r3
     if (chunk>=0)
   d4926:	1e03      	subs	r3, r0, #0
   d4928:	db01      	blt.n	d492e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d492a:	441c      	add	r4, r3
  while (size--) {
   d492c:	e7f3      	b.n	d4916 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d492e:	2c00      	cmp	r4, #0
   d4930:	bf08      	it	eq
   d4932:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4934:	4620      	mov	r0, r4
   d4936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4938 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4938:	b513      	push	{r0, r1, r4, lr}
   d493a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d493c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d493e:	b159      	cbz	r1, d4958 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4940:	9101      	str	r1, [sp, #4]
   d4942:	f001 f96a 	bl	d5c1a <strlen>
   d4946:	6823      	ldr	r3, [r4, #0]
   d4948:	9901      	ldr	r1, [sp, #4]
   d494a:	68db      	ldr	r3, [r3, #12]
   d494c:	4602      	mov	r2, r0
   d494e:	4620      	mov	r0, r4
    }
   d4950:	b002      	add	sp, #8
   d4952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4956:	4718      	bx	r3
    }
   d4958:	b002      	add	sp, #8
   d495a:	bd10      	pop	{r4, pc}

000d495c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d495c:	6803      	ldr	r3, [r0, #0]
   d495e:	689b      	ldr	r3, [r3, #8]
   d4960:	4718      	bx	r3

000d4962 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4962:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4964:	210d      	movs	r1, #13
{
   d4966:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4968:	f7ff fff8 	bl	d495c <_ZN5Print5printEc>
  n += print('\n');
   d496c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d496e:	4604      	mov	r4, r0
  n += print('\n');
   d4970:	4628      	mov	r0, r5
   d4972:	f7ff fff3 	bl	d495c <_ZN5Print5printEc>
  return n;
}
   d4976:	4420      	add	r0, r4
   d4978:	bd38      	pop	{r3, r4, r5, pc}

000d497a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d497a:	b538      	push	{r3, r4, r5, lr}
   d497c:	4605      	mov	r5, r0
  return write(str);
   d497e:	f7ff ffdb 	bl	d4938 <_ZN5Print5writeEPKc>
   d4982:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4984:	4628      	mov	r0, r5
   d4986:	f7ff ffec 	bl	d4962 <_ZN5Print7printlnEv>
  return n;
}
   d498a:	4420      	add	r0, r4
   d498c:	bd38      	pop	{r3, r4, r5, pc}

000d498e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d498e:	b530      	push	{r4, r5, lr}
   d4990:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4992:	2300      	movs	r3, #0
   d4994:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4998:	2a01      	cmp	r2, #1
   d499a:	bf98      	it	ls
   d499c:	220a      	movls	r2, #10
   d499e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d49a0:	460d      	mov	r5, r1
   d49a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d49a6:	fb01 5312 	mls	r3, r1, r2, r5
   d49aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d49ae:	2b09      	cmp	r3, #9
   d49b0:	bf94      	ite	ls
   d49b2:	3330      	addls	r3, #48	; 0x30
   d49b4:	3337      	addhi	r3, #55	; 0x37
   d49b6:	b2db      	uxtb	r3, r3
  } while(n);
   d49b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d49ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d49be:	d9ef      	bls.n	d49a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d49c0:	4621      	mov	r1, r4
   d49c2:	f7ff ffb9 	bl	d4938 <_ZN5Print5writeEPKc>
}
   d49c6:	b00b      	add	sp, #44	; 0x2c
   d49c8:	bd30      	pop	{r4, r5, pc}
	...

000d49cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d49cc:	4b01      	ldr	r3, [pc, #4]	; (d49d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d49ce:	4a02      	ldr	r2, [pc, #8]	; (d49d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d49d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d49d2:	4770      	bx	lr
   d49d4:	2003e5c4 	.word	0x2003e5c4
   d49d8:	000d5d64 	.word	0x000d5d64

000d49dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d49dc:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d49de:	681a      	ldr	r2, [r3, #0]
   d49e0:	4b02      	ldr	r3, [pc, #8]	; (d49ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d49e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d49e4:	4770      	bx	lr
   d49e6:	bf00      	nop
   d49e8:	2003e530 	.word	0x2003e530
   d49ec:	2003e5c8 	.word	0x2003e5c8

000d49f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d49f0:	2100      	movs	r1, #0
   d49f2:	f7ff bd99 	b.w	d4528 <system_delay_ms>

000d49f6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49f6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49f8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d49fa:	4604      	mov	r4, r0
      if (_M_manager)
   d49fc:	b113      	cbz	r3, d4a04 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49fe:	2203      	movs	r2, #3
   d4a00:	4601      	mov	r1, r0
   d4a02:	4798      	blx	r3
    }
   d4a04:	4620      	mov	r0, r4
   d4a06:	bd10      	pop	{r4, pc}

000d4a08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4a08:	b513      	push	{r0, r1, r4, lr}
   d4a0a:	460b      	mov	r3, r1
   d4a0c:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a0e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4a12:	466c      	mov	r4, sp
   d4a14:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a18:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a1c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a20:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4a24:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a28:	b002      	add	sp, #8
   d4a2a:	bd10      	pop	{r4, pc}

000d4a2c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4a2c:	4b01      	ldr	r3, [pc, #4]	; (d4a34 <_GLOBAL__sub_I_RGB+0x8>)
   d4a2e:	2200      	movs	r2, #0
   d4a30:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4a32:	4770      	bx	lr
   d4a34:	2003e5cc 	.word	0x2003e5cc

000d4a38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4a38:	4b01      	ldr	r3, [pc, #4]	; (d4a40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4a3a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4a3c:	4770      	bx	lr
   d4a3e:	bf00      	nop
   d4a40:	2003e534 	.word	0x2003e534

000d4a44 <serialEventRun>:
{
   d4a44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a46:	4b0b      	ldr	r3, [pc, #44]	; (d4a74 <serialEventRun+0x30>)
   d4a48:	b143      	cbz	r3, d4a5c <serialEventRun+0x18>
   d4a4a:	f000 fbfd 	bl	d5248 <_Z16_fetch_usbserialv>
   d4a4e:	6803      	ldr	r3, [r0, #0]
   d4a50:	691b      	ldr	r3, [r3, #16]
   d4a52:	4798      	blx	r3
   d4a54:	2800      	cmp	r0, #0
   d4a56:	dd01      	ble.n	d4a5c <serialEventRun+0x18>
        serialEvent();
   d4a58:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4a5c:	4b06      	ldr	r3, [pc, #24]	; (d4a78 <serialEventRun+0x34>)
   d4a5e:	b143      	cbz	r3, d4a72 <serialEventRun+0x2e>
   d4a60:	f000 fc6c 	bl	d533c <_Z22__fetch_global_Serial1v>
   d4a64:	6803      	ldr	r3, [r0, #0]
   d4a66:	691b      	ldr	r3, [r3, #16]
   d4a68:	4798      	blx	r3
   d4a6a:	2800      	cmp	r0, #0
   d4a6c:	dd01      	ble.n	d4a72 <serialEventRun+0x2e>
        serialEvent1();
   d4a6e:	f3af 8000 	nop.w
}
   d4a72:	bd08      	pop	{r3, pc}
	...

000d4a7c <_post_loop>:
{
   d4a7c:	b508      	push	{r3, lr}
	serialEventRun();
   d4a7e:	f7ff ffe1 	bl	d4a44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a82:	f7ff fc51 	bl	d4328 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a86:	4b01      	ldr	r3, [pc, #4]	; (d4a8c <_post_loop+0x10>)
   d4a88:	6018      	str	r0, [r3, #0]
}
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	2003e738 	.word	0x2003e738

000d4a90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a90:	4805      	ldr	r0, [pc, #20]	; (d4aa8 <_Z33system_initialize_user_backup_ramv+0x18>)
   d4a92:	4a06      	ldr	r2, [pc, #24]	; (d4aac <_Z33system_initialize_user_backup_ramv+0x1c>)
   d4a94:	4906      	ldr	r1, [pc, #24]	; (d4ab0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d4a96:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a98:	1a12      	subs	r2, r2, r0
   d4a9a:	f001 f867 	bl	d5b6c <memcpy>
    __backup_sram_signature = signature;
   d4a9e:	4b05      	ldr	r3, [pc, #20]	; (d4ab4 <_Z33system_initialize_user_backup_ramv+0x24>)
   d4aa0:	4a05      	ldr	r2, [pc, #20]	; (d4ab8 <_Z33system_initialize_user_backup_ramv+0x28>)
   d4aa2:	601a      	str	r2, [r3, #0]
}
   d4aa4:	bd08      	pop	{r3, pc}
   d4aa6:	bf00      	nop
   d4aa8:	2003f400 	.word	0x2003f400
   d4aac:	2003f404 	.word	0x2003f404
   d4ab0:	000d5ee0 	.word	0x000d5ee0
   d4ab4:	2003f400 	.word	0x2003f400
   d4ab8:	9a271c1e 	.word	0x9a271c1e

000d4abc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4abc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4abe:	2300      	movs	r3, #0
   d4ac0:	9300      	str	r3, [sp, #0]
   d4ac2:	461a      	mov	r2, r3
   d4ac4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ac8:	f7ff fd58 	bl	d457c <system_ctrl_set_result>
}
   d4acc:	b003      	add	sp, #12
   d4ace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ad4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4ad4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4ad6:	8843      	ldrh	r3, [r0, #2]
   d4ad8:	2b0a      	cmp	r3, #10
   d4ada:	d008      	beq.n	d4aee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4adc:	2b50      	cmp	r3, #80	; 0x50
   d4ade:	d10b      	bne.n	d4af8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4ae0:	4b09      	ldr	r3, [pc, #36]	; (d4b08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4ae2:	681b      	ldr	r3, [r3, #0]
   d4ae4:	b14b      	cbz	r3, d4afa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4ae6:	b003      	add	sp, #12
   d4ae8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4aec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4aee:	f7ff ffe5 	bl	d4abc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4af2:	b003      	add	sp, #12
   d4af4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4af8:	2300      	movs	r3, #0
   d4afa:	9300      	str	r3, [sp, #0]
   d4afc:	461a      	mov	r2, r3
   d4afe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b02:	f7ff fd3b 	bl	d457c <system_ctrl_set_result>
}
   d4b06:	e7f4      	b.n	d4af2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4b08:	2003e5e0 	.word	0x2003e5e0

000d4b0c <module_user_init_hook>:
{
   d4b0c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4b0e:	4812      	ldr	r0, [pc, #72]	; (d4b58 <module_user_init_hook+0x4c>)
   d4b10:	2100      	movs	r1, #0
   d4b12:	f7ff fde5 	bl	d46e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d4b16:	4b11      	ldr	r3, [pc, #68]	; (d4b5c <module_user_init_hook+0x50>)
   d4b18:	681a      	ldr	r2, [r3, #0]
   d4b1a:	4b11      	ldr	r3, [pc, #68]	; (d4b60 <module_user_init_hook+0x54>)
   d4b1c:	429a      	cmp	r2, r3
   d4b1e:	4b11      	ldr	r3, [pc, #68]	; (d4b64 <module_user_init_hook+0x58>)
   d4b20:	bf0c      	ite	eq
   d4b22:	2201      	moveq	r2, #1
   d4b24:	2200      	movne	r2, #0
   d4b26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4b28:	d001      	beq.n	d4b2e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d4b2a:	f7ff ffb1 	bl	d4a90 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4b2e:	f7ff fbf3 	bl	d4318 <HAL_RNG_GetRandomNumber>
   d4b32:	4604      	mov	r4, r0
    srand(seed);
   d4b34:	f001 f830 	bl	d5b98 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b38:	4b0b      	ldr	r3, [pc, #44]	; (d4b68 <module_user_init_hook+0x5c>)
   d4b3a:	b113      	cbz	r3, d4b42 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b42:	2100      	movs	r1, #0
   d4b44:	4808      	ldr	r0, [pc, #32]	; (d4b68 <module_user_init_hook+0x5c>)
   d4b46:	f7ff fd93 	bl	d4670 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b4e:	4807      	ldr	r0, [pc, #28]	; (d4b6c <module_user_init_hook+0x60>)
   d4b50:	2100      	movs	r1, #0
   d4b52:	f7ff bd09 	b.w	d4568 <system_ctrl_set_app_request_handler>
   d4b56:	bf00      	nop
   d4b58:	000d4a39 	.word	0x000d4a39
   d4b5c:	2003f400 	.word	0x2003f400
   d4b60:	9a271c1e 	.word	0x9a271c1e
   d4b64:	2003e5dc 	.word	0x2003e5dc
   d4b68:	00000000 	.word	0x00000000
   d4b6c:	000d4ad5 	.word	0x000d4ad5

000d4b70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b70:	4770      	bx	lr

000d4b72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4b72:	2000      	movs	r0, #0
   d4b74:	4770      	bx	lr

000d4b76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b76:	b510      	push	{r4, lr}
   d4b78:	2110      	movs	r1, #16
   d4b7a:	4604      	mov	r4, r0
   d4b7c:	f000 fe2c 	bl	d57d8 <_ZdlPvj>
   d4b80:	4620      	mov	r0, r4
   d4b82:	bd10      	pop	{r4, pc}

000d4b84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4b84:	b508      	push	{r3, lr}
      { delete this; }
   d4b86:	f7ff fff6 	bl	d4b76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4b8a:	bd08      	pop	{r3, pc}

000d4b8c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4b8c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4b8e:	2200      	movs	r2, #0
   d4b90:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4b94:	6002      	str	r2, [r0, #0]
   d4b96:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4b98:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b9a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4b9c:	680c      	ldr	r4, [r1, #0]
   d4b9e:	8085      	strh	r5, [r0, #4]
   d4ba0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ba2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4ba4:	bd30      	pop	{r4, r5, pc}

000d4ba6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4ba6:	b510      	push	{r4, lr}
   d4ba8:	4604      	mov	r4, r0
    free((void*)msg_);
   d4baa:	6800      	ldr	r0, [r0, #0]
   d4bac:	f7ff fd70 	bl	d4690 <free>
}
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4bb4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4bb6:	68c4      	ldr	r4, [r0, #12]
   d4bb8:	b1f4      	cbz	r4, d4bf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4bba:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4bbc:	2b02      	cmp	r3, #2
   d4bbe:	d103      	bne.n	d4bc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4bc0:	f104 000c 	add.w	r0, r4, #12
   d4bc4:	f7ff ffef 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4bc8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4bca:	b135      	cbz	r5, d4bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bcc:	4628      	mov	r0, r5
   d4bce:	f7ff ff12 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
   d4bd2:	2110      	movs	r1, #16
   d4bd4:	4628      	mov	r0, r5
   d4bd6:	f000 fdff 	bl	d57d8 <_ZdlPvj>
   d4bda:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4bdc:	b135      	cbz	r5, d4bec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4bde:	4628      	mov	r0, r5
   d4be0:	f7ff ff09 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
   d4be4:	2110      	movs	r1, #16
   d4be6:	4628      	mov	r0, r5
   d4be8:	f000 fdf6 	bl	d57d8 <_ZdlPvj>
   d4bec:	4620      	mov	r0, r4
   d4bee:	2114      	movs	r1, #20
   d4bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4bf4:	f000 bdf0 	b.w	d57d8 <_ZdlPvj>
   d4bf8:	bd38      	pop	{r3, r4, r5, pc}

000d4bfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bfc:	460e      	mov	r6, r1
   d4bfe:	4604      	mov	r4, r0
   d4c00:	f856 3b04 	ldr.w	r3, [r6], #4
   d4c04:	9300      	str	r3, [sp, #0]
   d4c06:	460d      	mov	r5, r1
   d4c08:	a801      	add	r0, sp, #4
   d4c0a:	4631      	mov	r1, r6
   d4c0c:	f7ff fe62 	bl	d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4c10:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4c12:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4c14:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4c16:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4c18:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4c1a:	2300      	movs	r3, #0
   d4c1c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c1e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4c20:	f7ff fe5f 	bl	d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c24:	4630      	mov	r0, r6
   d4c26:	f7ff fe5c 	bl	d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4c2a:	4628      	mov	r0, r5
   d4c2c:	2108      	movs	r1, #8
   d4c2e:	f000 fdd3 	bl	d57d8 <_ZdlPvj>
        return p;
    }
   d4c32:	4620      	mov	r0, r4
   d4c34:	b002      	add	sp, #8
   d4c36:	bd70      	pop	{r4, r5, r6, pc}

000d4c38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4c38:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4c3a:	b510      	push	{r4, lr}
      if (_M_empty())
   d4c3c:	b90a      	cbnz	r2, d4c42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4c3e:	f000 fdcf 	bl	d57e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c46:	68c3      	ldr	r3, [r0, #12]
   d4c48:	4718      	bx	r3

000d4c4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c4a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4c4c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4c4e:	f100 0110 	add.w	r1, r0, #16
   d4c52:	f7ff fff1 	bl	d4c38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4c56:	bd08      	pop	{r3, pc}

000d4c58 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4c58:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4c5a:	b510      	push	{r4, lr}
      if (_M_empty())
   d4c5c:	b90a      	cbnz	r2, d4c62 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4c5e:	f000 fdbf 	bl	d57e0 <_ZSt25__throw_bad_function_callv>
    }
   d4c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c66:	68c3      	ldr	r3, [r0, #12]
   d4c68:	4718      	bx	r3

000d4c6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c6a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4c6c:	6800      	ldr	r0, [r0, #0]
   d4c6e:	f100 0110 	add.w	r1, r0, #16
   d4c72:	f7ff fff1 	bl	d4c58 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4c76:	bd08      	pop	{r3, pc}

000d4c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c78:	b538      	push	{r3, r4, r5, lr}
   d4c7a:	2300      	movs	r3, #0
   d4c7c:	4604      	mov	r4, r0
   d4c7e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c80:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c82:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c84:	f7ff fa05 	bl	d4092 <_Znwj>
   d4c88:	b128      	cbz	r0, d4c96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4c8a:	2301      	movs	r3, #1
   d4c8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4c90:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4c92:	6003      	str	r3, [r0, #0]
   d4c94:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c96:	6020      	str	r0, [r4, #0]
	}
   d4c98:	4620      	mov	r0, r4
   d4c9a:	bd38      	pop	{r3, r4, r5, pc}
   d4c9c:	000d5d8c 	.word	0x000d5d8c

000d4ca0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4ca0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4ca2:	2300      	movs	r3, #0
   d4ca4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4ca6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4ca8:	4604      	mov	r4, r0
   d4caa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4cac:	b12b      	cbz	r3, d4cba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4cae:	2202      	movs	r2, #2
   d4cb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4cb2:	68eb      	ldr	r3, [r5, #12]
   d4cb4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4cb6:	68ab      	ldr	r3, [r5, #8]
   d4cb8:	60a3      	str	r3, [r4, #8]
    }
   d4cba:	4620      	mov	r0, r4
   d4cbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4cc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cc2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4cc4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4cc6:	4668      	mov	r0, sp
   d4cc8:	f7ff ff60 	bl	d4b8c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4ccc:	f04f 0302 	mov.w	r3, #2
   d4cd0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4cd4:	2a00      	cmp	r2, #0
   d4cd6:	d103      	bne.n	d4ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4cd8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4cdc:	2900      	cmp	r1, #0
   d4cde:	d1f7      	bne.n	d4cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4ce0:	d125      	bne.n	d4d2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4ce2:	f104 050c 	add.w	r5, r4, #12
   d4ce6:	4669      	mov	r1, sp
   d4ce8:	4628      	mov	r0, r5
   d4cea:	f7ff ff4f 	bl	d4b8c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4cee:	f3bf 8f5b 	dmb	ish
   d4cf2:	2301      	movs	r3, #1
   d4cf4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4cf6:	2000      	movs	r0, #0
   d4cf8:	f104 0308 	add.w	r3, r4, #8
   d4cfc:	f3bf 8f5b 	dmb	ish
   d4d00:	e853 6f00 	ldrex	r6, [r3]
   d4d04:	e843 0200 	strex	r2, r0, [r3]
   d4d08:	2a00      	cmp	r2, #0
   d4d0a:	d1f9      	bne.n	d4d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4d0c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4d10:	b16e      	cbz	r6, d4d2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4d12:	f7ff fc19 	bl	d4548 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4d16:	b178      	cbz	r0, d4d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4d18:	4629      	mov	r1, r5
   d4d1a:	4630      	mov	r0, r6
   d4d1c:	f7ff ff8c 	bl	d4c38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4d20:	4630      	mov	r0, r6
   d4d22:	f7ff fe68 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4d26:	2110      	movs	r1, #16
   d4d28:	4630      	mov	r0, r6
   d4d2a:	f000 fd55 	bl	d57d8 <_ZdlPvj>
        p_->setError(std::move(error));
   d4d2e:	4668      	mov	r0, sp
   d4d30:	f7ff ff39 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
    }
   d4d34:	b009      	add	sp, #36	; 0x24
   d4d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d38:	4631      	mov	r1, r6
   d4d3a:	a802      	add	r0, sp, #8
   d4d3c:	f7ff ffb0 	bl	d4ca0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4d40:	68e0      	ldr	r0, [r4, #12]
   d4d42:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4d46:	b108      	cbz	r0, d4d4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4d48:	f000 ff4a 	bl	d5be0 <strdup>
        type_(type) {
   d4d4c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d4e:	2010      	movs	r0, #16
   d4d50:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4d54:	f7ff f99d 	bl	d4092 <_Znwj>
   d4d58:	4605      	mov	r5, r0
   d4d5a:	b1e8      	cbz	r0, d4d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4d5c:	2700      	movs	r7, #0
   d4d5e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d60:	2018      	movs	r0, #24
   d4d62:	f7ff f996 	bl	d4092 <_Znwj>
   d4d66:	4604      	mov	r4, r0
   d4d68:	b188      	cbz	r0, d4d8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4d6a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4d6c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4d6e:	a802      	add	r0, sp, #8
   d4d70:	f7ff fe4a 	bl	d4a08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4d76:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d78:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4d7c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d7e:	a906      	add	r1, sp, #24
   d4d80:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d82:	60e3      	str	r3, [r4, #12]
   d4d84:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4d88:	9205      	str	r2, [sp, #20]
   d4d8a:	f7ff feff 	bl	d4b8c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4d8e:	4b08      	ldr	r3, [pc, #32]	; (d4db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4d90:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d92:	4b08      	ldr	r3, [pc, #32]	; (d4db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d94:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4d96:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4d98:	a806      	add	r0, sp, #24
   d4d9a:	f7ff ff04 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4d9e:	a802      	add	r0, sp, #8
   d4da0:	f7ff fe29 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4da4:	2200      	movs	r2, #0
   d4da6:	4629      	mov	r1, r5
   d4da8:	4803      	ldr	r0, [pc, #12]	; (d4db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4daa:	f7ff fbd5 	bl	d4558 <application_thread_invoke>
   d4dae:	e7b7      	b.n	d4d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4db0:	000d4c4b 	.word	0x000d4c4b
   d4db4:	000d4ee1 	.word	0x000d4ee1
   d4db8:	000d5389 	.word	0x000d5389

000d4dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4dc0:	b08a      	sub	sp, #40	; 0x28
   d4dc2:	4605      	mov	r5, r0
   d4dc4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4dc8:	460c      	mov	r4, r1
   d4dca:	4617      	mov	r7, r2
   d4dcc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4dce:	f7ff fc3f 	bl	d4650 <spark_cloud_flag_connected>
   d4dd2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4dd4:	4682      	mov	sl, r0
   d4dd6:	bb38      	cbnz	r0, d4e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4dd8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ddc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4dde:	a905      	add	r1, sp, #20
   d4de0:	4630      	mov	r0, r6
   d4de2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4de6:	f7ff fed1 	bl	d4b8c <_ZN8particle5ErrorC1EOS0_>
   d4dea:	2014      	movs	r0, #20
   d4dec:	f7ff f951 	bl	d4092 <_Znwj>
   d4df0:	4604      	mov	r4, r0
   d4df2:	b148      	cbz	r0, d4e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4df4:	2302      	movs	r3, #2
   d4df6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4df8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4dfa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dfe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4e00:	4631      	mov	r1, r6
   d4e02:	300c      	adds	r0, #12
   d4e04:	f7ff fec2 	bl	d4b8c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4e08:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4e0a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4e0c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4e10:	f7ff ff32 	bl	d4c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4e14:	4630      	mov	r0, r6
   d4e16:	f7ff fec6 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4e1a:	a805      	add	r0, sp, #20
   d4e1c:	f7ff fec3 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4e20:	4628      	mov	r0, r5
   d4e22:	b00a      	add	sp, #40	; 0x28
   d4e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4e28:	230c      	movs	r3, #12
   d4e2a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4e2e:	2014      	movs	r0, #20
   d4e30:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4e34:	9307      	str	r3, [sp, #28]
   d4e36:	f7ff f92c 	bl	d4092 <_Znwj>
   d4e3a:	4601      	mov	r1, r0
   d4e3c:	b128      	cbz	r0, d4e4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4e3e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4e42:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4e46:	f880 a001 	strb.w	sl, [r0, #1]
   d4e4a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4e4c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4e4e:	f7ff ff13 	bl	d4c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4e52:	4b22      	ldr	r3, [pc, #136]	; (d4edc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4e54:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4e56:	2008      	movs	r0, #8
   d4e58:	f7ff f91b 	bl	d4092 <_Znwj>
   d4e5c:	4682      	mov	sl, r0
   d4e5e:	b128      	cbz	r0, d4e6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e60:	9b03      	ldr	r3, [sp, #12]
   d4e62:	f840 3b04 	str.w	r3, [r0], #4
   d4e66:	a904      	add	r1, sp, #16
   d4e68:	f7ff fd34 	bl	d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4e6c:	9600      	str	r6, [sp, #0]
   d4e6e:	fa5f f389 	uxtb.w	r3, r9
   d4e72:	4642      	mov	r2, r8
   d4e74:	4639      	mov	r1, r7
   d4e76:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4e78:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4e7c:	f7ff fbf0 	bl	d4660 <spark_send_event>
   d4e80:	b9b8      	cbnz	r0, d4eb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4e82:	9b03      	ldr	r3, [sp, #12]
   d4e84:	785b      	ldrb	r3, [r3, #1]
   d4e86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4e8a:	b993      	cbnz	r3, d4eb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4e8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4e90:	a905      	add	r1, sp, #20
   d4e92:	a803      	add	r0, sp, #12
   d4e94:	9205      	str	r2, [sp, #20]
   d4e96:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4e9a:	f7ff ff11 	bl	d4cc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e9e:	a805      	add	r0, sp, #20
   d4ea0:	f7ff fe81 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4ea4:	a805      	add	r0, sp, #20
   d4ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ea8:	f7ff fea7 	bl	d4bfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4eac:	a806      	add	r0, sp, #24
   d4eae:	f7ff fd18 	bl	d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4eb2:	9b03      	ldr	r3, [sp, #12]
   d4eb4:	9305      	str	r3, [sp, #20]
   d4eb6:	a904      	add	r1, sp, #16
   d4eb8:	a806      	add	r0, sp, #24
   d4eba:	f7ff fd0b 	bl	d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ebe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4ec0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ec2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4ec4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4ec6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4ec8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4eca:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4ecc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4ece:	f7ff fd08 	bl	d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ed2:	a804      	add	r0, sp, #16
   d4ed4:	f7ff fd05 	bl	d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4ed8:	e7a2      	b.n	d4e20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4eda:	bf00      	nop
   d4edc:	000d4fa5 	.word	0x000d4fa5

000d4ee0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4ee0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ee4:	4605      	mov	r5, r0
	  switch (__op)
   d4ee6:	d007      	beq.n	d4ef8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4ee8:	2a03      	cmp	r2, #3
   d4eea:	d018      	beq.n	d4f1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4eec:	2a01      	cmp	r2, #1
   d4eee:	d101      	bne.n	d4ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4ef0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ef2:	6003      	str	r3, [r0, #0]
	}
   d4ef4:	2000      	movs	r0, #0
   d4ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ef8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4efa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4efc:	f7ff f8c9 	bl	d4092 <_Znwj>
   d4f00:	4604      	mov	r4, r0
   d4f02:	b150      	cbz	r0, d4f1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4f04:	4631      	mov	r1, r6
   d4f06:	f7ff fecb 	bl	d4ca0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4f0a:	6930      	ldr	r0, [r6, #16]
   d4f0c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4f10:	b108      	cbz	r0, d4f16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4f12:	f000 fe65 	bl	d5be0 <strdup>
        type_(type) {
   d4f16:	6120      	str	r0, [r4, #16]
   d4f18:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4f1a:	602c      	str	r4, [r5, #0]
	}
   d4f1c:	e7ea      	b.n	d4ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4f1e:	6804      	ldr	r4, [r0, #0]
   d4f20:	2c00      	cmp	r4, #0
   d4f22:	d0e7      	beq.n	d4ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4f24:	f104 0010 	add.w	r0, r4, #16
   d4f28:	f7ff fe3d 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f7ff fd62 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4f32:	2118      	movs	r1, #24
   d4f34:	4620      	mov	r0, r4
   d4f36:	f000 fc4f 	bl	d57d8 <_ZdlPvj>
   d4f3a:	e7db      	b.n	d4ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4f3c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4f3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4f3e:	2300      	movs	r3, #0
   d4f40:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4f42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4f44:	4604      	mov	r4, r0
   d4f46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4f48:	b12b      	cbz	r3, d4f56 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f4a:	2202      	movs	r2, #2
   d4f4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f4e:	68eb      	ldr	r3, [r5, #12]
   d4f50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f52:	68ab      	ldr	r3, [r5, #8]
   d4f54:	60a3      	str	r3, [r4, #8]
    }
   d4f56:	4620      	mov	r0, r4
   d4f58:	bd38      	pop	{r3, r4, r5, pc}

000d4f5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4f5a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4f5c:	b570      	push	{r4, r5, r6, lr}
   d4f5e:	4604      	mov	r4, r0
	  switch (__op)
   d4f60:	d007      	beq.n	d4f72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4f62:	2a03      	cmp	r2, #3
   d4f64:	d012      	beq.n	d4f8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4f66:	2a01      	cmp	r2, #1
   d4f68:	d101      	bne.n	d4f6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4f6a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4f6c:	6003      	str	r3, [r0, #0]
	}
   d4f6e:	2000      	movs	r0, #0
   d4f70:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4f72:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4f74:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4f76:	f7ff f88c 	bl	d4092 <_Znwj>
   d4f7a:	4605      	mov	r5, r0
   d4f7c:	b120      	cbz	r0, d4f88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4f7e:	4631      	mov	r1, r6
   d4f80:	f7ff ffdc 	bl	d4f3c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4f84:	7c33      	ldrb	r3, [r6, #16]
   d4f86:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4f88:	6025      	str	r5, [r4, #0]
	}
   d4f8a:	e7f0      	b.n	d4f6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4f8c:	6804      	ldr	r4, [r0, #0]
   d4f8e:	2c00      	cmp	r4, #0
   d4f90:	d0ed      	beq.n	d4f6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4f92:	4620      	mov	r0, r4
   d4f94:	f7ff fd2f 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4f98:	2114      	movs	r1, #20
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	f000 fc1c 	bl	d57d8 <_ZdlPvj>
   d4fa0:	e7e5      	b.n	d4f6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fa6:	b089      	sub	sp, #36	; 0x24
   d4fa8:	4604      	mov	r4, r0
   d4faa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4fac:	a801      	add	r0, sp, #4
   d4fae:	4611      	mov	r1, r2
   d4fb0:	f7ff fe23 	bl	d4bfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4fb4:	b1a4      	cbz	r4, d4fe0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4fb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4fb8:	b11d      	cbz	r5, d4fc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4fba:	4628      	mov	r0, r5
   d4fbc:	f000 fe10 	bl	d5be0 <strdup>
   d4fc0:	4605      	mov	r5, r0
   d4fc2:	a801      	add	r0, sp, #4
   d4fc4:	a903      	add	r1, sp, #12
        type_(type) {
   d4fc6:	9503      	str	r5, [sp, #12]
   d4fc8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4fcc:	f7ff fe78 	bl	d4cc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4fd0:	a803      	add	r0, sp, #12
   d4fd2:	f7ff fde8 	bl	d4ba6 <_ZN8particle5ErrorD1Ev>
   d4fd6:	a802      	add	r0, sp, #8
   d4fd8:	f7ff fc83 	bl	d48e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fdc:	b009      	add	sp, #36	; 0x24
   d4fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4fe0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4fe2:	2301      	movs	r3, #1
   d4fe4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4fe8:	2a00      	cmp	r2, #0
   d4fea:	d103      	bne.n	d4ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4fec:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4ff0:	2900      	cmp	r1, #0
   d4ff2:	d1f7      	bne.n	d4fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4ff4:	d1ef      	bne.n	d4fd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4ff6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4ff8:	f3bf 8f5b 	dmb	ish
   d4ffc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4ffe:	1d2b      	adds	r3, r5, #4
   d5000:	f3bf 8f5b 	dmb	ish
   d5004:	e853 6f00 	ldrex	r6, [r3]
   d5008:	e843 4200 	strex	r2, r4, [r3]
   d500c:	2a00      	cmp	r2, #0
   d500e:	d1f9      	bne.n	d5004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5010:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5014:	2e00      	cmp	r6, #0
   d5016:	d0de      	beq.n	d4fd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff fa95 	bl	d4548 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d501e:	4607      	mov	r7, r0
   d5020:	b160      	cbz	r0, d503c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5022:	f105 010c 	add.w	r1, r5, #12
   d5026:	4630      	mov	r0, r6
   d5028:	f7ff fe16 	bl	d4c58 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d502c:	4630      	mov	r0, r6
   d502e:	f7ff fce2 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5032:	2110      	movs	r1, #16
   d5034:	4630      	mov	r0, r6
   d5036:	f000 fbcf 	bl	d57d8 <_ZdlPvj>
   d503a:	e7cc      	b.n	d4fd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d503c:	4631      	mov	r1, r6
   d503e:	a803      	add	r0, sp, #12
   d5040:	f7ff ff7c 	bl	d4f3c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5044:	7b2b      	ldrb	r3, [r5, #12]
   d5046:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d504a:	2010      	movs	r0, #16
   d504c:	f7ff f821 	bl	d4092 <_Znwj>
   d5050:	4605      	mov	r5, r0
   d5052:	b1d0      	cbz	r0, d508a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5054:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5056:	2014      	movs	r0, #20
   d5058:	f7ff f81b 	bl	d4092 <_Znwj>
   d505c:	4604      	mov	r4, r0
   d505e:	b178      	cbz	r0, d5080 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5060:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5062:	4601      	mov	r1, r0
   d5064:	a803      	add	r0, sp, #12
   d5066:	f7ff fccf 	bl	d4a08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d506a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d506c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d506e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5070:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5072:	9205      	str	r2, [sp, #20]
   d5074:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5076:	60e3      	str	r3, [r4, #12]
   d5078:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d507c:	9206      	str	r2, [sp, #24]
   d507e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5080:	4b06      	ldr	r3, [pc, #24]	; (d509c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5082:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5084:	4b06      	ldr	r3, [pc, #24]	; (d50a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5086:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5088:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d508a:	a803      	add	r0, sp, #12
   d508c:	f7ff fcb3 	bl	d49f6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5090:	2200      	movs	r2, #0
   d5092:	4629      	mov	r1, r5
   d5094:	4803      	ldr	r0, [pc, #12]	; (d50a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5096:	f7ff fa5f 	bl	d4558 <application_thread_invoke>
   d509a:	e7c7      	b.n	d502c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d509c:	000d4c6b 	.word	0x000d4c6b
   d50a0:	000d4f5b 	.word	0x000d4f5b
   d50a4:	000d5389 	.word	0x000d5389

000d50a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d50a8:	4770      	bx	lr

000d50aa <_ZN9IPAddressD0Ev>:
   d50aa:	b510      	push	{r4, lr}
   d50ac:	2118      	movs	r1, #24
   d50ae:	4604      	mov	r4, r0
   d50b0:	f000 fb92 	bl	d57d8 <_ZdlPvj>
   d50b4:	4620      	mov	r0, r4
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d50b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d50ba:	7d03      	ldrb	r3, [r0, #20]
   d50bc:	2b06      	cmp	r3, #6
{
   d50be:	b08d      	sub	sp, #52	; 0x34
   d50c0:	460e      	mov	r6, r1
   d50c2:	f100 0704 	add.w	r7, r0, #4
   d50c6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d50ca:	d012      	beq.n	d50f2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d50cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d50d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d50d4:	220a      	movs	r2, #10
   d50d6:	4630      	mov	r0, r6
   d50d8:	f7ff fc59 	bl	d498e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d50e0:	d019      	beq.n	d5116 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d50e2:	2c00      	cmp	r4, #0
   d50e4:	d0f4      	beq.n	d50d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d50e6:	212e      	movs	r1, #46	; 0x2e
   d50e8:	4630      	mov	r0, r6
   d50ea:	f7ff fc37 	bl	d495c <_ZN5Print5printEc>
   d50ee:	4404      	add	r4, r0
   d50f0:	e7ee      	b.n	d50d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50f2:	232f      	movs	r3, #47	; 0x2f
   d50f4:	466a      	mov	r2, sp
   d50f6:	4639      	mov	r1, r7
   d50f8:	200a      	movs	r0, #10
		buf[0] = 0;
   d50fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50fe:	f7ff f923 	bl	d4348 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5102:	4668      	mov	r0, sp
   d5104:	f000 fd89 	bl	d5c1a <strlen>
   d5108:	6833      	ldr	r3, [r6, #0]
   d510a:	4602      	mov	r2, r0
   d510c:	68db      	ldr	r3, [r3, #12]
   d510e:	4669      	mov	r1, sp
   d5110:	4630      	mov	r0, r6
   d5112:	4798      	blx	r3
   d5114:	4604      	mov	r4, r0
    }
    return n;
}
   d5116:	4620      	mov	r0, r4
   d5118:	b00d      	add	sp, #52	; 0x34
   d511a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d511c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d511c:	b510      	push	{r4, lr}
   d511e:	4b05      	ldr	r3, [pc, #20]	; (d5134 <_ZN9IPAddressC1Ev+0x18>)
   d5120:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5122:	2211      	movs	r2, #17
   d5124:	f840 3b04 	str.w	r3, [r0], #4
   d5128:	2100      	movs	r1, #0
   d512a:	f000 fd2d 	bl	d5b88 <memset>
}
   d512e:	4620      	mov	r0, r4
   d5130:	bd10      	pop	{r4, pc}
   d5132:	bf00      	nop
   d5134:	000d5da8 	.word	0x000d5da8

000d5138 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5138:	4603      	mov	r3, r0
   d513a:	4a07      	ldr	r2, [pc, #28]	; (d5158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d513c:	b510      	push	{r4, lr}
   d513e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5142:	f101 0210 	add.w	r2, r1, #16
   d5146:	f851 4b04 	ldr.w	r4, [r1], #4
   d514a:	f843 4b04 	str.w	r4, [r3], #4
   d514e:	4291      	cmp	r1, r2
   d5150:	d1f9      	bne.n	d5146 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5152:	780a      	ldrb	r2, [r1, #0]
   d5154:	701a      	strb	r2, [r3, #0]
}
   d5156:	bd10      	pop	{r4, pc}
   d5158:	000d5da8 	.word	0x000d5da8

000d515c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d515c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d515e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5162:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5166:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d516a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d516e:	2304      	movs	r3, #4
   d5170:	6041      	str	r1, [r0, #4]
   d5172:	7503      	strb	r3, [r0, #20]
}
   d5174:	bd10      	pop	{r4, pc}

000d5176 <_ZN9IPAddressaSEPKh>:
{
   d5176:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5178:	78cb      	ldrb	r3, [r1, #3]
   d517a:	9300      	str	r3, [sp, #0]
   d517c:	788b      	ldrb	r3, [r1, #2]
   d517e:	784a      	ldrb	r2, [r1, #1]
   d5180:	7809      	ldrb	r1, [r1, #0]
   d5182:	f7ff ffeb 	bl	d515c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5186:	b002      	add	sp, #8
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d518a:	7441      	strb	r1, [r0, #17]
}
   d518c:	4770      	bx	lr

000d518e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d518e:	4770      	bx	lr

000d5190 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5190:	4770      	bx	lr

000d5192 <_ZN9USBSerial4readEv>:
{
   d5192:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5194:	2100      	movs	r1, #0
   d5196:	7c00      	ldrb	r0, [r0, #16]
   d5198:	f7ff f9a6 	bl	d44e8 <HAL_USB_USART_Receive_Data>
}
   d519c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51a0:	bd08      	pop	{r3, pc}

000d51a2 <_ZN9USBSerial4peekEv>:
{
   d51a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d51a4:	2101      	movs	r1, #1
   d51a6:	7c00      	ldrb	r0, [r0, #16]
   d51a8:	f7ff f99e 	bl	d44e8 <HAL_USB_USART_Receive_Data>
}
   d51ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51b0:	bd08      	pop	{r3, pc}

000d51b2 <_ZN9USBSerial17availableForWriteEv>:
{
   d51b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d51b4:	7c00      	ldrb	r0, [r0, #16]
   d51b6:	f7ff f98f 	bl	d44d8 <HAL_USB_USART_Available_Data_For_Write>
}
   d51ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51be:	bd08      	pop	{r3, pc}

000d51c0 <_ZN9USBSerial9availableEv>:
{
   d51c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d51c2:	7c00      	ldrb	r0, [r0, #16]
   d51c4:	f7ff f980 	bl	d44c8 <HAL_USB_USART_Available_Data>
}
   d51c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51cc:	bd08      	pop	{r3, pc}

000d51ce <_ZN9USBSerial5writeEh>:
{
   d51ce:	b513      	push	{r0, r1, r4, lr}
   d51d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51d2:	7c00      	ldrb	r0, [r0, #16]
{
   d51d4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51d6:	f7ff f97f 	bl	d44d8 <HAL_USB_USART_Available_Data_For_Write>
   d51da:	2800      	cmp	r0, #0
   d51dc:	9901      	ldr	r1, [sp, #4]
   d51de:	dc01      	bgt.n	d51e4 <_ZN9USBSerial5writeEh+0x16>
   d51e0:	7c60      	ldrb	r0, [r4, #17]
   d51e2:	b120      	cbz	r0, d51ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d51e4:	7c20      	ldrb	r0, [r4, #16]
   d51e6:	f7ff f987 	bl	d44f8 <HAL_USB_USART_Send_Data>
   d51ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d51ee:	b002      	add	sp, #8
   d51f0:	bd10      	pop	{r4, pc}

000d51f2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d51f2:	7c00      	ldrb	r0, [r0, #16]
   d51f4:	f7ff b988 	b.w	d4508 <HAL_USB_USART_Flush_Data>

000d51f8 <_ZN9USBSerialD0Ev>:
   d51f8:	b510      	push	{r4, lr}
   d51fa:	2114      	movs	r1, #20
   d51fc:	4604      	mov	r4, r0
   d51fe:	f000 faeb 	bl	d57d8 <_ZdlPvj>
   d5202:	4620      	mov	r0, r4
   d5204:	bd10      	pop	{r4, pc}
	...

000d5208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5208:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d520a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d520e:	4604      	mov	r4, r0
   d5210:	4608      	mov	r0, r1
   d5212:	2100      	movs	r1, #0
   d5214:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5218:	4b04      	ldr	r3, [pc, #16]	; (d522c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d521a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d521c:	2301      	movs	r3, #1
  _serial = serial;
   d521e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5220:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5222:	4611      	mov	r1, r2
   d5224:	f7ff f940 	bl	d44a8 <HAL_USB_USART_Init>
}
   d5228:	4620      	mov	r0, r4
   d522a:	bd10      	pop	{r4, pc}
   d522c:	000d5dbc 	.word	0x000d5dbc

000d5230 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5230:	7c00      	ldrb	r0, [r0, #16]
   d5232:	2200      	movs	r2, #0
   d5234:	f7ff b940 	b.w	d44b8 <HAL_USB_USART_Begin>

000d5238 <_Z19acquireSerialBufferv>:
{
   d5238:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d523a:	2214      	movs	r2, #20
{
   d523c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d523e:	2100      	movs	r1, #0
   d5240:	f000 fca2 	bl	d5b88 <memset>
}
   d5244:	4620      	mov	r0, r4
   d5246:	bd10      	pop	{r4, pc}

000d5248 <_Z16_fetch_usbserialv>:
{
   d5248:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d524a:	4c0f      	ldr	r4, [pc, #60]	; (d5288 <_Z16_fetch_usbserialv+0x40>)
{
   d524c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d524e:	a803      	add	r0, sp, #12
   d5250:	f7ff fff2 	bl	d5238 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5254:	7821      	ldrb	r1, [r4, #0]
   d5256:	f3bf 8f5b 	dmb	ish
   d525a:	f011 0101 	ands.w	r1, r1, #1
   d525e:	d10f      	bne.n	d5280 <_Z16_fetch_usbserialv+0x38>
   d5260:	4620      	mov	r0, r4
   d5262:	9101      	str	r1, [sp, #4]
   d5264:	f7fe ff1b 	bl	d409e <__cxa_guard_acquire>
   d5268:	9901      	ldr	r1, [sp, #4]
   d526a:	b148      	cbz	r0, d5280 <_Z16_fetch_usbserialv+0x38>
   d526c:	aa03      	add	r2, sp, #12
   d526e:	4807      	ldr	r0, [pc, #28]	; (d528c <_Z16_fetch_usbserialv+0x44>)
   d5270:	f7ff ffca 	bl	d5208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5274:	4620      	mov	r0, r4
   d5276:	f7fe ff17 	bl	d40a8 <__cxa_guard_release>
   d527a:	4805      	ldr	r0, [pc, #20]	; (d5290 <_Z16_fetch_usbserialv+0x48>)
   d527c:	f000 fc70 	bl	d5b60 <atexit>
	return _usbserial;
}
   d5280:	4802      	ldr	r0, [pc, #8]	; (d528c <_Z16_fetch_usbserialv+0x44>)
   d5282:	b008      	add	sp, #32
   d5284:	bd10      	pop	{r4, pc}
   d5286:	bf00      	nop
   d5288:	2003e5e4 	.word	0x2003e5e4
   d528c:	2003e5e8 	.word	0x2003e5e8
   d5290:	000d518f 	.word	0x000d518f

000d5294 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5294:	4770      	bx	lr

000d5296 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5296:	7441      	strb	r1, [r0, #17]
}
   d5298:	4770      	bx	lr

000d529a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d529a:	4770      	bx	lr

000d529c <_ZN11USARTSerial17availableForWriteEv>:
{
   d529c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d529e:	7c00      	ldrb	r0, [r0, #16]
   d52a0:	f7ff f892 	bl	d43c8 <hal_usart_available_data_for_write>
}
   d52a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52a8:	bd08      	pop	{r3, pc}

000d52aa <_ZN11USARTSerial9availableEv>:
{
   d52aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d52ac:	7c00      	ldrb	r0, [r0, #16]
   d52ae:	f7ff f863 	bl	d4378 <hal_usart_available>
}
   d52b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52b6:	bd08      	pop	{r3, pc}

000d52b8 <_ZN11USARTSerial4peekEv>:
{
   d52b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d52ba:	7c00      	ldrb	r0, [r0, #16]
   d52bc:	f7ff f86c 	bl	d4398 <hal_usart_peek>
}
   d52c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52c4:	bd08      	pop	{r3, pc}

000d52c6 <_ZN11USARTSerial4readEv>:
{
   d52c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d52c8:	7c00      	ldrb	r0, [r0, #16]
   d52ca:	f7ff f85d 	bl	d4388 <hal_usart_read>
}
   d52ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52d2:	bd08      	pop	{r3, pc}

000d52d4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d52d4:	7c00      	ldrb	r0, [r0, #16]
   d52d6:	f7ff b867 	b.w	d43a8 <hal_usart_flush>

000d52da <_ZN11USARTSerial5writeEh>:
{
   d52da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52dc:	7c45      	ldrb	r5, [r0, #17]
{
   d52de:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52e0:	b12d      	cbz	r5, d52ee <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d52e2:	7c20      	ldrb	r0, [r4, #16]
}
   d52e4:	b003      	add	sp, #12
   d52e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d52ea:	f7ff b83d 	b.w	d4368 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52ee:	7c00      	ldrb	r0, [r0, #16]
   d52f0:	9101      	str	r1, [sp, #4]
   d52f2:	f7ff f869 	bl	d43c8 <hal_usart_available_data_for_write>
   d52f6:	2800      	cmp	r0, #0
   d52f8:	9901      	ldr	r1, [sp, #4]
   d52fa:	dcf2      	bgt.n	d52e2 <_ZN11USARTSerial5writeEh+0x8>
}
   d52fc:	4628      	mov	r0, r5
   d52fe:	b003      	add	sp, #12
   d5300:	bd30      	pop	{r4, r5, pc}

000d5302 <_ZN11USARTSerialD0Ev>:
   d5302:	b510      	push	{r4, lr}
   d5304:	2114      	movs	r1, #20
   d5306:	4604      	mov	r4, r0
   d5308:	f000 fa66 	bl	d57d8 <_ZdlPvj>
   d530c:	4620      	mov	r0, r4
   d530e:	bd10      	pop	{r4, pc}

000d5310 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5310:	b510      	push	{r4, lr}
   d5312:	f04f 0c00 	mov.w	ip, #0
   d5316:	4604      	mov	r4, r0
   d5318:	4608      	mov	r0, r1
   d531a:	4611      	mov	r1, r2
   d531c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5320:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5324:	4a04      	ldr	r2, [pc, #16]	; (d5338 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5326:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5328:	2201      	movs	r2, #1
  _serial = serial;
   d532a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d532c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d532e:	461a      	mov	r2, r3
   d5330:	f7ff f812 	bl	d4358 <hal_usart_init>
}
   d5334:	4620      	mov	r0, r4
   d5336:	bd10      	pop	{r4, pc}
   d5338:	000d5dec 	.word	0x000d5dec

000d533c <_Z22__fetch_global_Serial1v>:
{
   d533c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d533e:	4c0d      	ldr	r4, [pc, #52]	; (d5374 <_Z22__fetch_global_Serial1v+0x38>)
   d5340:	7821      	ldrb	r1, [r4, #0]
   d5342:	f3bf 8f5b 	dmb	ish
   d5346:	f011 0101 	ands.w	r1, r1, #1
   d534a:	d110      	bne.n	d536e <_Z22__fetch_global_Serial1v+0x32>
   d534c:	4620      	mov	r0, r4
   d534e:	9101      	str	r1, [sp, #4]
   d5350:	f7fe fea5 	bl	d409e <__cxa_guard_acquire>
   d5354:	9901      	ldr	r1, [sp, #4]
   d5356:	b150      	cbz	r0, d536e <_Z22__fetch_global_Serial1v+0x32>
   d5358:	4b07      	ldr	r3, [pc, #28]	; (d5378 <_Z22__fetch_global_Serial1v+0x3c>)
   d535a:	4a08      	ldr	r2, [pc, #32]	; (d537c <_Z22__fetch_global_Serial1v+0x40>)
   d535c:	4808      	ldr	r0, [pc, #32]	; (d5380 <_Z22__fetch_global_Serial1v+0x44>)
   d535e:	f7ff ffd7 	bl	d5310 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5362:	4620      	mov	r0, r4
   d5364:	f7fe fea0 	bl	d40a8 <__cxa_guard_release>
   d5368:	4806      	ldr	r0, [pc, #24]	; (d5384 <_Z22__fetch_global_Serial1v+0x48>)
   d536a:	f000 fbf9 	bl	d5b60 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d536e:	4804      	ldr	r0, [pc, #16]	; (d5380 <_Z22__fetch_global_Serial1v+0x44>)
   d5370:	b002      	add	sp, #8
   d5372:	bd10      	pop	{r4, pc}
   d5374:	2003e5fc 	.word	0x2003e5fc
   d5378:	2003e684 	.word	0x2003e684
   d537c:	2003e600 	.word	0x2003e600
   d5380:	2003e708 	.word	0x2003e708
   d5384:	000d529b 	.word	0x000d529b

000d5388 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5388:	b510      	push	{r4, lr}
      if (_M_empty())
   d538a:	6883      	ldr	r3, [r0, #8]
   d538c:	4604      	mov	r4, r0
   d538e:	b90b      	cbnz	r3, d5394 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5390:	f000 fa26 	bl	d57e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5394:	68c3      	ldr	r3, [r0, #12]
   d5396:	4798      	blx	r3
      if (_M_manager)
   d5398:	68a3      	ldr	r3, [r4, #8]
   d539a:	b11b      	cbz	r3, d53a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d539c:	2203      	movs	r2, #3
   d539e:	4621      	mov	r1, r4
   d53a0:	4620      	mov	r0, r4
   d53a2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d53a4:	4620      	mov	r0, r4
   d53a6:	2110      	movs	r1, #16
}
   d53a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d53ac:	f000 ba14 	b.w	d57d8 <_ZdlPvj>

000d53b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d53b0:	4770      	bx	lr

000d53b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b4:	4606      	mov	r6, r0
   d53b6:	4615      	mov	r5, r2
   d53b8:	460c      	mov	r4, r1
   d53ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53bc:	42bc      	cmp	r4, r7
   d53be:	d006      	beq.n	d53ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53c0:	6833      	ldr	r3, [r6, #0]
   d53c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53c6:	689b      	ldr	r3, [r3, #8]
   d53c8:	4630      	mov	r0, r6
   d53ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53cc:	e7f6      	b.n	d53bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53ce:	4628      	mov	r0, r5
   d53d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53d2:	7c00      	ldrb	r0, [r0, #16]
   d53d4:	2200      	movs	r2, #0
   d53d6:	f7ff b817 	b.w	d4408 <hal_i2c_write>

000d53da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53da:	7c00      	ldrb	r0, [r0, #16]
   d53dc:	2100      	movs	r1, #0
   d53de:	f7ff b81b 	b.w	d4418 <hal_i2c_available>

000d53e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53e2:	7c00      	ldrb	r0, [r0, #16]
   d53e4:	2100      	movs	r1, #0
   d53e6:	f7ff b81f 	b.w	d4428 <hal_i2c_read>

000d53ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53ea:	7c00      	ldrb	r0, [r0, #16]
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7ff b823 	b.w	d4438 <hal_i2c_peek>

000d53f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d53f2:	7c00      	ldrb	r0, [r0, #16]
   d53f4:	2100      	movs	r1, #0
   d53f6:	f7ff b827 	b.w	d4448 <hal_i2c_flush>

000d53fa <_ZN7TwoWireD0Ev>:
   d53fa:	b510      	push	{r4, lr}
   d53fc:	2114      	movs	r1, #20
   d53fe:	4604      	mov	r4, r0
   d5400:	f000 f9ea 	bl	d57d8 <_ZdlPvj>
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5408:	b510      	push	{r4, lr}
   d540a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d540e:	4604      	mov	r4, r0
   d5410:	4608      	mov	r0, r1
   d5412:	2100      	movs	r1, #0
   d5414:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5418:	4b03      	ldr	r3, [pc, #12]	; (d5428 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d541a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d541c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d541e:	4611      	mov	r1, r2
   d5420:	f7ff f822 	bl	d4468 <hal_i2c_init>
}
   d5424:	4620      	mov	r0, r4
   d5426:	bd10      	pop	{r4, pc}
   d5428:	000d5e1c 	.word	0x000d5e1c

000d542c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d542c:	2300      	movs	r3, #0
   d542e:	7c00      	ldrb	r0, [r0, #16]
   d5430:	461a      	mov	r2, r3
   d5432:	4619      	mov	r1, r3
   d5434:	f7fe bfd0 	b.w	d43d8 <hal_i2c_begin>

000d5438 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d543a:	2200      	movs	r2, #0
   d543c:	2314      	movs	r3, #20
   d543e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5442:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5446:	780b      	ldrb	r3, [r1, #0]
   d5448:	f88d 3008 	strb.w	r3, [sp, #8]
   d544c:	684b      	ldr	r3, [r1, #4]
   d544e:	9303      	str	r3, [sp, #12]
   d5450:	68cb      	ldr	r3, [r1, #12]
   d5452:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5454:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5456:	7a0b      	ldrb	r3, [r1, #8]
   d5458:	9305      	str	r3, [sp, #20]
   d545a:	a901      	add	r1, sp, #4
   d545c:	f7ff f80c 	bl	d4478 <hal_i2c_request_ex>
}
   d5460:	b007      	add	sp, #28
   d5462:	f85d fb04 	ldr.w	pc, [sp], #4

000d5466 <_ZN7TwoWire11requestFromEhjh>:
{
   d5466:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5468:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d546a:	f88d 1000 	strb.w	r1, [sp]
   d546e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5472:	9103      	str	r1, [sp, #12]
   d5474:	bf18      	it	ne
   d5476:	2301      	movne	r3, #1
   d5478:	4669      	mov	r1, sp
    size_ = size;
   d547a:	9201      	str	r2, [sp, #4]
   d547c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5480:	f7ff ffda 	bl	d5438 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5484:	b005      	add	sp, #20
   d5486:	f85d fb04 	ldr.w	pc, [sp], #4

000d548a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d548a:	2301      	movs	r3, #1
   d548c:	f7ff bfeb 	b.w	d5466 <_ZN7TwoWire11requestFromEhjh>

000d5490 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5490:	7c00      	ldrb	r0, [r0, #16]
   d5492:	2200      	movs	r2, #0
   d5494:	f7fe bfa8 	b.w	d43e8 <hal_i2c_begin_transmission>

000d5498 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5498:	7c00      	ldrb	r0, [r0, #16]
   d549a:	2200      	movs	r2, #0
   d549c:	f7fe bfac 	b.w	d43f8 <hal_i2c_end_transmission>

000d54a0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d54a0:	2101      	movs	r1, #1
   d54a2:	f7ff bff9 	b.w	d5498 <_ZN7TwoWire15endTransmissionEh>

000d54a6 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d54a6:	7c00      	ldrb	r0, [r0, #16]
   d54a8:	2100      	movs	r1, #0
   d54aa:	f7fe bfd5 	b.w	d4458 <hal_i2c_is_enabled>

000d54ae <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d54ae:	2200      	movs	r2, #0
   d54b0:	6840      	ldr	r0, [r0, #4]
   d54b2:	4611      	mov	r1, r2
   d54b4:	f7ff b884 	b.w	d45c0 <network_ready>

000d54b8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54b8:	2200      	movs	r2, #0
   d54ba:	6840      	ldr	r0, [r0, #4]
   d54bc:	4611      	mov	r1, r2
   d54be:	f7ff b89f 	b.w	d4600 <network_listening>

000d54c2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d54c2:	2200      	movs	r2, #0
   d54c4:	6840      	ldr	r0, [r0, #4]
   d54c6:	4611      	mov	r1, r2
   d54c8:	f7ff b8aa 	b.w	d4620 <network_get_listen_timeout>

000d54cc <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d54cc:	6840      	ldr	r0, [r0, #4]
   d54ce:	2200      	movs	r2, #0
   d54d0:	f7ff b89e 	b.w	d4610 <network_set_listen_timeout>

000d54d4 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d54d4:	6840      	ldr	r0, [r0, #4]
   d54d6:	2200      	movs	r2, #0
   d54d8:	f081 0101 	eor.w	r1, r1, #1
   d54dc:	f7ff b888 	b.w	d45f0 <network_listen>

000d54e0 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54e0:	2300      	movs	r3, #0
   d54e2:	6840      	ldr	r0, [r0, #4]
   d54e4:	461a      	mov	r2, r3
   d54e6:	4619      	mov	r1, r3
   d54e8:	f7ff b87a 	b.w	d45e0 <network_off>

000d54ec <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d54ec:	2300      	movs	r3, #0
   d54ee:	6840      	ldr	r0, [r0, #4]
   d54f0:	461a      	mov	r2, r3
   d54f2:	4619      	mov	r1, r3
   d54f4:	f7ff b86c 	b.w	d45d0 <network_on>

000d54f8 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54f8:	2200      	movs	r2, #0
   d54fa:	6840      	ldr	r0, [r0, #4]
   d54fc:	4611      	mov	r1, r2
   d54fe:	f7ff b84f 	b.w	d45a0 <network_connecting>

000d5502 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5502:	6840      	ldr	r0, [r0, #4]
   d5504:	2200      	movs	r2, #0
   d5506:	2102      	movs	r1, #2
   d5508:	f7ff b852 	b.w	d45b0 <network_disconnect>

000d550c <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d550c:	2300      	movs	r3, #0
   d550e:	6840      	ldr	r0, [r0, #4]
   d5510:	461a      	mov	r2, r3
   d5512:	f7ff b83d 	b.w	d4590 <network_connect>
	...

000d5518 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5518:	4b02      	ldr	r3, [pc, #8]	; (d5524 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d551a:	2204      	movs	r2, #4
   d551c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d551e:	4a02      	ldr	r2, [pc, #8]	; (d5528 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5520:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5522:	4770      	bx	lr
   d5524:	2003e71c 	.word	0x2003e71c
   d5528:	000d5e44 	.word	0x000d5e44

000d552c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d552c:	2300      	movs	r3, #0
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	461a      	mov	r2, r3
   d5532:	f7ff b82d 	b.w	d4590 <network_connect>

000d5536 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	2200      	movs	r2, #0
   d553a:	2102      	movs	r1, #2
   d553c:	f7ff b838 	b.w	d45b0 <network_disconnect>

000d5540 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5540:	2200      	movs	r2, #0
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	4611      	mov	r1, r2
   d5546:	f7ff b82b 	b.w	d45a0 <network_connecting>

000d554a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d554a:	2200      	movs	r2, #0
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	4611      	mov	r1, r2
   d5550:	f7ff b836 	b.w	d45c0 <network_ready>

000d5554 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5554:	2300      	movs	r3, #0
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	461a      	mov	r2, r3
   d555a:	4619      	mov	r1, r3
   d555c:	f7ff b838 	b.w	d45d0 <network_on>

000d5560 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5560:	2300      	movs	r3, #0
   d5562:	6840      	ldr	r0, [r0, #4]
   d5564:	461a      	mov	r2, r3
   d5566:	4619      	mov	r1, r3
   d5568:	f7ff b83a 	b.w	d45e0 <network_off>

000d556c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	2100      	movs	r1, #0
   d5570:	f7ff b85e 	b.w	d4630 <network_is_on>

000d5574 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5574:	6840      	ldr	r0, [r0, #4]
   d5576:	2100      	movs	r1, #0
   d5578:	f7ff b862 	b.w	d4640 <network_is_off>

000d557c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d557c:	6840      	ldr	r0, [r0, #4]
   d557e:	2200      	movs	r2, #0
   d5580:	f081 0101 	eor.w	r1, r1, #1
   d5584:	f7ff b834 	b.w	d45f0 <network_listen>

000d5588 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5588:	6840      	ldr	r0, [r0, #4]
   d558a:	2200      	movs	r2, #0
   d558c:	f7ff b840 	b.w	d4610 <network_set_listen_timeout>

000d5590 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5590:	2200      	movs	r2, #0
   d5592:	6840      	ldr	r0, [r0, #4]
   d5594:	4611      	mov	r1, r2
   d5596:	f7ff b843 	b.w	d4620 <network_get_listen_timeout>

000d559a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d559a:	2200      	movs	r2, #0
   d559c:	6840      	ldr	r0, [r0, #4]
   d559e:	4611      	mov	r1, r2
   d55a0:	f7ff b82e 	b.w	d4600 <network_listening>

000d55a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d55a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55a8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d55aa:	b095      	sub	sp, #84	; 0x54
   d55ac:	4616      	mov	r6, r2
   d55ae:	460d      	mov	r5, r1
   d55b0:	4607      	mov	r7, r0
    IPAddress addr;
   d55b2:	f7ff fdb3 	bl	d511c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d55b6:	4621      	mov	r1, r4
   d55b8:	2218      	movs	r2, #24
   d55ba:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d55bc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d55be:	f000 fae3 	bl	d5b88 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d55c2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d55c4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d55c8:	4621      	mov	r1, r4
   d55ca:	466b      	mov	r3, sp
   d55cc:	aa0c      	add	r2, sp, #48	; 0x30
   d55ce:	4630      	mov	r0, r6
   d55d0:	f7fe fe82 	bl	d42d8 <netdb_getaddrinfo>
    if (!r) {
   d55d4:	4604      	mov	r4, r0
   d55d6:	2800      	cmp	r0, #0
   d55d8:	d146      	bne.n	d5668 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55da:	4602      	mov	r2, r0
   d55dc:	2101      	movs	r1, #1
   d55de:	6868      	ldr	r0, [r5, #4]
   d55e0:	f7fe ffee 	bl	d45c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55e8:	4622      	mov	r2, r4
   d55ea:	6868      	ldr	r0, [r5, #4]
   d55ec:	f7fe ffe8 	bl	d45c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55f2:	4681      	mov	r9, r0
        bool ok = false;
   d55f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55f6:	2e00      	cmp	r6, #0
   d55f8:	d036      	beq.n	d5668 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d55fa:	2900      	cmp	r1, #0
   d55fc:	d134      	bne.n	d5668 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55fe:	6873      	ldr	r3, [r6, #4]
   d5600:	2b02      	cmp	r3, #2
   d5602:	d003      	beq.n	d560c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5604:	2b0a      	cmp	r3, #10
   d5606:	d00b      	beq.n	d5620 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5608:	69f6      	ldr	r6, [r6, #28]
   d560a:	e7f4      	b.n	d55f6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d560c:	f1b8 0f00 	cmp.w	r8, #0
   d5610:	d004      	beq.n	d561c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5612:	6971      	ldr	r1, [r6, #20]
   d5614:	4638      	mov	r0, r7
   d5616:	3104      	adds	r1, #4
   d5618:	f7ff fdad 	bl	d5176 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d561c:	4641      	mov	r1, r8
   d561e:	e7f3      	b.n	d5608 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5620:	f1b9 0f00 	cmp.w	r9, #0
   d5624:	d101      	bne.n	d562a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5626:	4649      	mov	r1, r9
   d5628:	e7ee      	b.n	d5608 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d562a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d562c:	2210      	movs	r2, #16
   d562e:	a801      	add	r0, sp, #4
   d5630:	f000 faaa 	bl	d5b88 <memset>
                    a.v = 6;
   d5634:	2306      	movs	r3, #6
   d5636:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d563a:	ad01      	add	r5, sp, #4
   d563c:	f104 0308 	add.w	r3, r4, #8
   d5640:	3418      	adds	r4, #24
   d5642:	6818      	ldr	r0, [r3, #0]
   d5644:	6859      	ldr	r1, [r3, #4]
   d5646:	462a      	mov	r2, r5
   d5648:	c203      	stmia	r2!, {r0, r1}
   d564a:	3308      	adds	r3, #8
   d564c:	42a3      	cmp	r3, r4
   d564e:	4615      	mov	r5, r2
   d5650:	d1f7      	bne.n	d5642 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5652:	a901      	add	r1, sp, #4
   d5654:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5656:	ad07      	add	r5, sp, #28
   d5658:	f7ff fd6e 	bl	d5138 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d565c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d565e:	1d3c      	adds	r4, r7, #4
   d5660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5662:	682b      	ldr	r3, [r5, #0]
   d5664:	7023      	strb	r3, [r4, #0]
   d5666:	e7de      	b.n	d5626 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5668:	9800      	ldr	r0, [sp, #0]
   d566a:	f7fe fe2d 	bl	d42c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d566e:	4638      	mov	r0, r7
   d5670:	b015      	add	sp, #84	; 0x54
   d5672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5678 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5678:	4b02      	ldr	r3, [pc, #8]	; (d5684 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d567a:	4a03      	ldr	r2, [pc, #12]	; (d5688 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d567c:	601a      	str	r2, [r3, #0]
   d567e:	2200      	movs	r2, #0
   d5680:	605a      	str	r2, [r3, #4]

} // spark
   d5682:	4770      	bx	lr
   d5684:	2003e724 	.word	0x2003e724
   d5688:	000d5e80 	.word	0x000d5e80

000d568c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d568c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d568e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5690:	d902      	bls.n	d5698 <pinAvailable+0xc>
    return false;
   d5692:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5694:	b002      	add	sp, #8
   d5696:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5698:	f1a0 030b 	sub.w	r3, r0, #11
   d569c:	2b02      	cmp	r3, #2
   d569e:	d81a      	bhi.n	d56d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d56a0:	4c17      	ldr	r4, [pc, #92]	; (d5700 <pinAvailable+0x74>)
   d56a2:	7821      	ldrb	r1, [r4, #0]
   d56a4:	f3bf 8f5b 	dmb	ish
   d56a8:	f011 0101 	ands.w	r1, r1, #1
   d56ac:	d10b      	bne.n	d56c6 <pinAvailable+0x3a>
   d56ae:	4620      	mov	r0, r4
   d56b0:	9101      	str	r1, [sp, #4]
   d56b2:	f7fe fcf4 	bl	d409e <__cxa_guard_acquire>
   d56b6:	9901      	ldr	r1, [sp, #4]
   d56b8:	b128      	cbz	r0, d56c6 <pinAvailable+0x3a>
   d56ba:	4812      	ldr	r0, [pc, #72]	; (d5704 <pinAvailable+0x78>)
   d56bc:	f7ff f856 	bl	d476c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d56c0:	4620      	mov	r0, r4
   d56c2:	f7fe fcf1 	bl	d40a8 <__cxa_guard_release>
   d56c6:	4b0f      	ldr	r3, [pc, #60]	; (d5704 <pinAvailable+0x78>)
   d56c8:	7818      	ldrb	r0, [r3, #0]
   d56ca:	f7fe fee5 	bl	d4498 <hal_spi_is_enabled>
   d56ce:	2800      	cmp	r0, #0
   d56d0:	d1df      	bne.n	d5692 <pinAvailable+0x6>
  return true; // 'pin' is available
   d56d2:	2001      	movs	r0, #1
   d56d4:	e7de      	b.n	d5694 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d56d6:	2801      	cmp	r0, #1
   d56d8:	d809      	bhi.n	d56ee <pinAvailable+0x62>
   d56da:	f000 f859 	bl	d5790 <_Z19__fetch_global_Wirev>
   d56de:	2100      	movs	r1, #0
   d56e0:	7c00      	ldrb	r0, [r0, #16]
   d56e2:	f7fe feb9 	bl	d4458 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d56e6:	f080 0001 	eor.w	r0, r0, #1
   d56ea:	b2c0      	uxtb	r0, r0
   d56ec:	e7d2      	b.n	d5694 <pinAvailable+0x8>
   d56ee:	3809      	subs	r0, #9
   d56f0:	2801      	cmp	r0, #1
   d56f2:	d8ee      	bhi.n	d56d2 <pinAvailable+0x46>
   d56f4:	f7ff fe22 	bl	d533c <_Z22__fetch_global_Serial1v>
   d56f8:	7c00      	ldrb	r0, [r0, #16]
   d56fa:	f7fe fe5d 	bl	d43b8 <hal_usart_is_enabled>
   d56fe:	e7f2      	b.n	d56e6 <pinAvailable+0x5a>
   d5700:	2003e72c 	.word	0x2003e72c
   d5704:	2003e730 	.word	0x2003e730

000d5708 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5708:	2823      	cmp	r0, #35	; 0x23
{
   d570a:	b538      	push	{r3, r4, r5, lr}
   d570c:	4604      	mov	r4, r0
   d570e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5710:	d80a      	bhi.n	d5728 <pinMode+0x20>
   d5712:	29ff      	cmp	r1, #255	; 0xff
   d5714:	d008      	beq.n	d5728 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5716:	f7ff ffb9 	bl	d568c <pinAvailable>
   d571a:	b128      	cbz	r0, d5728 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d571c:	4629      	mov	r1, r5
   d571e:	4620      	mov	r0, r4
}
   d5720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5724:	f7fe bde0 	b.w	d42e8 <HAL_Pin_Mode>
}
   d5728:	bd38      	pop	{r3, r4, r5, pc}

000d572a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d572a:	b538      	push	{r3, r4, r5, lr}
   d572c:	4604      	mov	r4, r0
   d572e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5730:	f7fe fde2 	bl	d42f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5734:	28ff      	cmp	r0, #255	; 0xff
   d5736:	d010      	beq.n	d575a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5738:	2806      	cmp	r0, #6
   d573a:	d804      	bhi.n	d5746 <digitalWrite+0x1c>
   d573c:	234d      	movs	r3, #77	; 0x4d
   d573e:	fa23 f000 	lsr.w	r0, r3, r0
   d5742:	07c3      	lsls	r3, r0, #31
   d5744:	d409      	bmi.n	d575a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5746:	4620      	mov	r0, r4
   d5748:	f7ff ffa0 	bl	d568c <pinAvailable>
   d574c:	b128      	cbz	r0, d575a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d574e:	4629      	mov	r1, r5
   d5750:	4620      	mov	r0, r4
}
   d5752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5756:	f7fe bdd7 	b.w	d4308 <HAL_GPIO_Write>
}
   d575a:	bd38      	pop	{r3, r4, r5, pc}

000d575c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d575c:	4770      	bx	lr
	...

000d5760 <_Z17acquireWireBufferv>:
{
   d5760:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5762:	2300      	movs	r3, #0
   d5764:	2520      	movs	r5, #32
   d5766:	8043      	strh	r3, [r0, #2]
   d5768:	2314      	movs	r3, #20
{
   d576a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d576c:	8003      	strh	r3, [r0, #0]
   d576e:	6085      	str	r5, [r0, #8]
   d5770:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5772:	4906      	ldr	r1, [pc, #24]	; (d578c <_Z17acquireWireBufferv+0x2c>)
   d5774:	4628      	mov	r0, r5
   d5776:	f000 f831 	bl	d57dc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d577a:	4904      	ldr	r1, [pc, #16]	; (d578c <_Z17acquireWireBufferv+0x2c>)
	};
   d577c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d577e:	4628      	mov	r0, r5
   d5780:	f000 f82c 	bl	d57dc <_ZnajRKSt9nothrow_t>
	};
   d5784:	60e0      	str	r0, [r4, #12]
}
   d5786:	4620      	mov	r0, r4
   d5788:	bd38      	pop	{r3, r4, r5, pc}
   d578a:	bf00      	nop
   d578c:	000d5eb4 	.word	0x000d5eb4

000d5790 <_Z19__fetch_global_Wirev>:
{
   d5790:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5792:	4d0e      	ldr	r5, [pc, #56]	; (d57cc <_Z19__fetch_global_Wirev+0x3c>)
   d5794:	7829      	ldrb	r1, [r5, #0]
   d5796:	f3bf 8f5b 	dmb	ish
   d579a:	f011 0401 	ands.w	r4, r1, #1
{
   d579e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d57a0:	d111      	bne.n	d57c6 <_Z19__fetch_global_Wirev+0x36>
   d57a2:	4628      	mov	r0, r5
   d57a4:	f7fe fc7b 	bl	d409e <__cxa_guard_acquire>
   d57a8:	b168      	cbz	r0, d57c6 <_Z19__fetch_global_Wirev+0x36>
   d57aa:	a801      	add	r0, sp, #4
   d57ac:	f7ff ffd8 	bl	d5760 <_Z17acquireWireBufferv>
   d57b0:	aa01      	add	r2, sp, #4
   d57b2:	4621      	mov	r1, r4
   d57b4:	4806      	ldr	r0, [pc, #24]	; (d57d0 <_Z19__fetch_global_Wirev+0x40>)
   d57b6:	f7ff fe27 	bl	d5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d57ba:	4628      	mov	r0, r5
   d57bc:	f7fe fc74 	bl	d40a8 <__cxa_guard_release>
   d57c0:	4804      	ldr	r0, [pc, #16]	; (d57d4 <_Z19__fetch_global_Wirev+0x44>)
   d57c2:	f000 f9cd 	bl	d5b60 <atexit>
	return wire;
}
   d57c6:	4802      	ldr	r0, [pc, #8]	; (d57d0 <_Z19__fetch_global_Wirev+0x40>)
   d57c8:	b007      	add	sp, #28
   d57ca:	bd30      	pop	{r4, r5, pc}
   d57cc:	2003e73c 	.word	0x2003e73c
   d57d0:	2003e740 	.word	0x2003e740
   d57d4:	000d575d 	.word	0x000d575d

000d57d8 <_ZdlPvj>:
   d57d8:	f7fe bc5f 	b.w	d409a <_ZdlPv>

000d57dc <_ZnajRKSt9nothrow_t>:
   d57dc:	f7fe bc5b 	b.w	d4096 <_Znaj>

000d57e0 <_ZSt25__throw_bad_function_callv>:
   d57e0:	b508      	push	{r3, lr}
   d57e2:	f7fe ff6d 	bl	d46c0 <abort>
	...

000d57e8 <__aeabi_drsub>:
   d57e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d57ec:	e002      	b.n	d57f4 <__adddf3>
   d57ee:	bf00      	nop

000d57f0 <__aeabi_dsub>:
   d57f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d57f4 <__adddf3>:
   d57f4:	b530      	push	{r4, r5, lr}
   d57f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d57fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d57fe:	ea94 0f05 	teq	r4, r5
   d5802:	bf08      	it	eq
   d5804:	ea90 0f02 	teqeq	r0, r2
   d5808:	bf1f      	itttt	ne
   d580a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d580e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5812:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5816:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d581a:	f000 80e2 	beq.w	d59e2 <__adddf3+0x1ee>
   d581e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5822:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5826:	bfb8      	it	lt
   d5828:	426d      	neglt	r5, r5
   d582a:	dd0c      	ble.n	d5846 <__adddf3+0x52>
   d582c:	442c      	add	r4, r5
   d582e:	ea80 0202 	eor.w	r2, r0, r2
   d5832:	ea81 0303 	eor.w	r3, r1, r3
   d5836:	ea82 0000 	eor.w	r0, r2, r0
   d583a:	ea83 0101 	eor.w	r1, r3, r1
   d583e:	ea80 0202 	eor.w	r2, r0, r2
   d5842:	ea81 0303 	eor.w	r3, r1, r3
   d5846:	2d36      	cmp	r5, #54	; 0x36
   d5848:	bf88      	it	hi
   d584a:	bd30      	pophi	{r4, r5, pc}
   d584c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5850:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5854:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5858:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d585c:	d002      	beq.n	d5864 <__adddf3+0x70>
   d585e:	4240      	negs	r0, r0
   d5860:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5864:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5868:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d586c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5870:	d002      	beq.n	d5878 <__adddf3+0x84>
   d5872:	4252      	negs	r2, r2
   d5874:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5878:	ea94 0f05 	teq	r4, r5
   d587c:	f000 80a7 	beq.w	d59ce <__adddf3+0x1da>
   d5880:	f1a4 0401 	sub.w	r4, r4, #1
   d5884:	f1d5 0e20 	rsbs	lr, r5, #32
   d5888:	db0d      	blt.n	d58a6 <__adddf3+0xb2>
   d588a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d588e:	fa22 f205 	lsr.w	r2, r2, r5
   d5892:	1880      	adds	r0, r0, r2
   d5894:	f141 0100 	adc.w	r1, r1, #0
   d5898:	fa03 f20e 	lsl.w	r2, r3, lr
   d589c:	1880      	adds	r0, r0, r2
   d589e:	fa43 f305 	asr.w	r3, r3, r5
   d58a2:	4159      	adcs	r1, r3
   d58a4:	e00e      	b.n	d58c4 <__adddf3+0xd0>
   d58a6:	f1a5 0520 	sub.w	r5, r5, #32
   d58aa:	f10e 0e20 	add.w	lr, lr, #32
   d58ae:	2a01      	cmp	r2, #1
   d58b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58b4:	bf28      	it	cs
   d58b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58ba:	fa43 f305 	asr.w	r3, r3, r5
   d58be:	18c0      	adds	r0, r0, r3
   d58c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d58c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58c8:	d507      	bpl.n	d58da <__adddf3+0xe6>
   d58ca:	f04f 0e00 	mov.w	lr, #0
   d58ce:	f1dc 0c00 	rsbs	ip, ip, #0
   d58d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d58d6:	eb6e 0101 	sbc.w	r1, lr, r1
   d58da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d58de:	d31b      	bcc.n	d5918 <__adddf3+0x124>
   d58e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d58e4:	d30c      	bcc.n	d5900 <__adddf3+0x10c>
   d58e6:	0849      	lsrs	r1, r1, #1
   d58e8:	ea5f 0030 	movs.w	r0, r0, rrx
   d58ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d58f0:	f104 0401 	add.w	r4, r4, #1
   d58f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d58f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d58fc:	f080 809a 	bcs.w	d5a34 <__adddf3+0x240>
   d5900:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5904:	bf08      	it	eq
   d5906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d590a:	f150 0000 	adcs.w	r0, r0, #0
   d590e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5912:	ea41 0105 	orr.w	r1, r1, r5
   d5916:	bd30      	pop	{r4, r5, pc}
   d5918:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d591c:	4140      	adcs	r0, r0
   d591e:	eb41 0101 	adc.w	r1, r1, r1
   d5922:	3c01      	subs	r4, #1
   d5924:	bf28      	it	cs
   d5926:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d592a:	d2e9      	bcs.n	d5900 <__adddf3+0x10c>
   d592c:	f091 0f00 	teq	r1, #0
   d5930:	bf04      	itt	eq
   d5932:	4601      	moveq	r1, r0
   d5934:	2000      	moveq	r0, #0
   d5936:	fab1 f381 	clz	r3, r1
   d593a:	bf08      	it	eq
   d593c:	3320      	addeq	r3, #32
   d593e:	f1a3 030b 	sub.w	r3, r3, #11
   d5942:	f1b3 0220 	subs.w	r2, r3, #32
   d5946:	da0c      	bge.n	d5962 <__adddf3+0x16e>
   d5948:	320c      	adds	r2, #12
   d594a:	dd08      	ble.n	d595e <__adddf3+0x16a>
   d594c:	f102 0c14 	add.w	ip, r2, #20
   d5950:	f1c2 020c 	rsb	r2, r2, #12
   d5954:	fa01 f00c 	lsl.w	r0, r1, ip
   d5958:	fa21 f102 	lsr.w	r1, r1, r2
   d595c:	e00c      	b.n	d5978 <__adddf3+0x184>
   d595e:	f102 0214 	add.w	r2, r2, #20
   d5962:	bfd8      	it	le
   d5964:	f1c2 0c20 	rsble	ip, r2, #32
   d5968:	fa01 f102 	lsl.w	r1, r1, r2
   d596c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5970:	bfdc      	itt	le
   d5972:	ea41 010c 	orrle.w	r1, r1, ip
   d5976:	4090      	lslle	r0, r2
   d5978:	1ae4      	subs	r4, r4, r3
   d597a:	bfa2      	ittt	ge
   d597c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5980:	4329      	orrge	r1, r5
   d5982:	bd30      	popge	{r4, r5, pc}
   d5984:	ea6f 0404 	mvn.w	r4, r4
   d5988:	3c1f      	subs	r4, #31
   d598a:	da1c      	bge.n	d59c6 <__adddf3+0x1d2>
   d598c:	340c      	adds	r4, #12
   d598e:	dc0e      	bgt.n	d59ae <__adddf3+0x1ba>
   d5990:	f104 0414 	add.w	r4, r4, #20
   d5994:	f1c4 0220 	rsb	r2, r4, #32
   d5998:	fa20 f004 	lsr.w	r0, r0, r4
   d599c:	fa01 f302 	lsl.w	r3, r1, r2
   d59a0:	ea40 0003 	orr.w	r0, r0, r3
   d59a4:	fa21 f304 	lsr.w	r3, r1, r4
   d59a8:	ea45 0103 	orr.w	r1, r5, r3
   d59ac:	bd30      	pop	{r4, r5, pc}
   d59ae:	f1c4 040c 	rsb	r4, r4, #12
   d59b2:	f1c4 0220 	rsb	r2, r4, #32
   d59b6:	fa20 f002 	lsr.w	r0, r0, r2
   d59ba:	fa01 f304 	lsl.w	r3, r1, r4
   d59be:	ea40 0003 	orr.w	r0, r0, r3
   d59c2:	4629      	mov	r1, r5
   d59c4:	bd30      	pop	{r4, r5, pc}
   d59c6:	fa21 f004 	lsr.w	r0, r1, r4
   d59ca:	4629      	mov	r1, r5
   d59cc:	bd30      	pop	{r4, r5, pc}
   d59ce:	f094 0f00 	teq	r4, #0
   d59d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d59d6:	bf06      	itte	eq
   d59d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d59dc:	3401      	addeq	r4, #1
   d59de:	3d01      	subne	r5, #1
   d59e0:	e74e      	b.n	d5880 <__adddf3+0x8c>
   d59e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59e6:	bf18      	it	ne
   d59e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d59ec:	d029      	beq.n	d5a42 <__adddf3+0x24e>
   d59ee:	ea94 0f05 	teq	r4, r5
   d59f2:	bf08      	it	eq
   d59f4:	ea90 0f02 	teqeq	r0, r2
   d59f8:	d005      	beq.n	d5a06 <__adddf3+0x212>
   d59fa:	ea54 0c00 	orrs.w	ip, r4, r0
   d59fe:	bf04      	itt	eq
   d5a00:	4619      	moveq	r1, r3
   d5a02:	4610      	moveq	r0, r2
   d5a04:	bd30      	pop	{r4, r5, pc}
   d5a06:	ea91 0f03 	teq	r1, r3
   d5a0a:	bf1e      	ittt	ne
   d5a0c:	2100      	movne	r1, #0
   d5a0e:	2000      	movne	r0, #0
   d5a10:	bd30      	popne	{r4, r5, pc}
   d5a12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a16:	d105      	bne.n	d5a24 <__adddf3+0x230>
   d5a18:	0040      	lsls	r0, r0, #1
   d5a1a:	4149      	adcs	r1, r1
   d5a1c:	bf28      	it	cs
   d5a1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a22:	bd30      	pop	{r4, r5, pc}
   d5a24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a28:	bf3c      	itt	cc
   d5a2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a2e:	bd30      	popcc	{r4, r5, pc}
   d5a30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a3c:	f04f 0000 	mov.w	r0, #0
   d5a40:	bd30      	pop	{r4, r5, pc}
   d5a42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a46:	bf1a      	itte	ne
   d5a48:	4619      	movne	r1, r3
   d5a4a:	4610      	movne	r0, r2
   d5a4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a50:	bf1c      	itt	ne
   d5a52:	460b      	movne	r3, r1
   d5a54:	4602      	movne	r2, r0
   d5a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a5a:	bf06      	itte	eq
   d5a5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a60:	ea91 0f03 	teqeq	r1, r3
   d5a64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a68:	bd30      	pop	{r4, r5, pc}
   d5a6a:	bf00      	nop

000d5a6c <__aeabi_ui2d>:
   d5a6c:	f090 0f00 	teq	r0, #0
   d5a70:	bf04      	itt	eq
   d5a72:	2100      	moveq	r1, #0
   d5a74:	4770      	bxeq	lr
   d5a76:	b530      	push	{r4, r5, lr}
   d5a78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a80:	f04f 0500 	mov.w	r5, #0
   d5a84:	f04f 0100 	mov.w	r1, #0
   d5a88:	e750      	b.n	d592c <__adddf3+0x138>
   d5a8a:	bf00      	nop

000d5a8c <__aeabi_i2d>:
   d5a8c:	f090 0f00 	teq	r0, #0
   d5a90:	bf04      	itt	eq
   d5a92:	2100      	moveq	r1, #0
   d5a94:	4770      	bxeq	lr
   d5a96:	b530      	push	{r4, r5, lr}
   d5a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5aa0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5aa4:	bf48      	it	mi
   d5aa6:	4240      	negmi	r0, r0
   d5aa8:	f04f 0100 	mov.w	r1, #0
   d5aac:	e73e      	b.n	d592c <__adddf3+0x138>
   d5aae:	bf00      	nop

000d5ab0 <__aeabi_f2d>:
   d5ab0:	0042      	lsls	r2, r0, #1
   d5ab2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ab6:	ea4f 0131 	mov.w	r1, r1, rrx
   d5aba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5abe:	bf1f      	itttt	ne
   d5ac0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ac4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ac8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5acc:	4770      	bxne	lr
   d5ace:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5ad2:	bf08      	it	eq
   d5ad4:	4770      	bxeq	lr
   d5ad6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5ada:	bf04      	itt	eq
   d5adc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5ae0:	4770      	bxeq	lr
   d5ae2:	b530      	push	{r4, r5, lr}
   d5ae4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5ae8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5aec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5af0:	e71c      	b.n	d592c <__adddf3+0x138>
   d5af2:	bf00      	nop

000d5af4 <__aeabi_ul2d>:
   d5af4:	ea50 0201 	orrs.w	r2, r0, r1
   d5af8:	bf08      	it	eq
   d5afa:	4770      	bxeq	lr
   d5afc:	b530      	push	{r4, r5, lr}
   d5afe:	f04f 0500 	mov.w	r5, #0
   d5b02:	e00a      	b.n	d5b1a <__aeabi_l2d+0x16>

000d5b04 <__aeabi_l2d>:
   d5b04:	ea50 0201 	orrs.w	r2, r0, r1
   d5b08:	bf08      	it	eq
   d5b0a:	4770      	bxeq	lr
   d5b0c:	b530      	push	{r4, r5, lr}
   d5b0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b12:	d502      	bpl.n	d5b1a <__aeabi_l2d+0x16>
   d5b14:	4240      	negs	r0, r0
   d5b16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b26:	f43f aed8 	beq.w	d58da <__adddf3+0xe6>
   d5b2a:	f04f 0203 	mov.w	r2, #3
   d5b2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b32:	bf18      	it	ne
   d5b34:	3203      	addne	r2, #3
   d5b36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b3a:	bf18      	it	ne
   d5b3c:	3203      	addne	r2, #3
   d5b3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b42:	f1c2 0320 	rsb	r3, r2, #32
   d5b46:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b4a:	fa20 f002 	lsr.w	r0, r0, r2
   d5b4e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b52:	ea40 000e 	orr.w	r0, r0, lr
   d5b56:	fa21 f102 	lsr.w	r1, r1, r2
   d5b5a:	4414      	add	r4, r2
   d5b5c:	e6bd      	b.n	d58da <__adddf3+0xe6>
   d5b5e:	bf00      	nop

000d5b60 <atexit>:
   d5b60:	2300      	movs	r3, #0
   d5b62:	4601      	mov	r1, r0
   d5b64:	461a      	mov	r2, r3
   d5b66:	4618      	mov	r0, r3
   d5b68:	f000 b860 	b.w	d5c2c <__register_exitproc>

000d5b6c <memcpy>:
   d5b6c:	440a      	add	r2, r1
   d5b6e:	4291      	cmp	r1, r2
   d5b70:	f100 33ff 	add.w	r3, r0, #4294967295
   d5b74:	d100      	bne.n	d5b78 <memcpy+0xc>
   d5b76:	4770      	bx	lr
   d5b78:	b510      	push	{r4, lr}
   d5b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5b82:	4291      	cmp	r1, r2
   d5b84:	d1f9      	bne.n	d5b7a <memcpy+0xe>
   d5b86:	bd10      	pop	{r4, pc}

000d5b88 <memset>:
   d5b88:	4402      	add	r2, r0
   d5b8a:	4603      	mov	r3, r0
   d5b8c:	4293      	cmp	r3, r2
   d5b8e:	d100      	bne.n	d5b92 <memset+0xa>
   d5b90:	4770      	bx	lr
   d5b92:	f803 1b01 	strb.w	r1, [r3], #1
   d5b96:	e7f9      	b.n	d5b8c <memset+0x4>

000d5b98 <srand>:
   d5b98:	b538      	push	{r3, r4, r5, lr}
   d5b9a:	4b0d      	ldr	r3, [pc, #52]	; (d5bd0 <srand+0x38>)
   d5b9c:	681d      	ldr	r5, [r3, #0]
   d5b9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5ba0:	4604      	mov	r4, r0
   d5ba2:	b97b      	cbnz	r3, d5bc4 <srand+0x2c>
   d5ba4:	2018      	movs	r0, #24
   d5ba6:	f7fe fd6b 	bl	d4680 <malloc>
   d5baa:	4a0a      	ldr	r2, [pc, #40]	; (d5bd4 <srand+0x3c>)
   d5bac:	4b0a      	ldr	r3, [pc, #40]	; (d5bd8 <srand+0x40>)
   d5bae:	63a8      	str	r0, [r5, #56]	; 0x38
   d5bb0:	e9c0 2300 	strd	r2, r3, [r0]
   d5bb4:	4b09      	ldr	r3, [pc, #36]	; (d5bdc <srand+0x44>)
   d5bb6:	6083      	str	r3, [r0, #8]
   d5bb8:	230b      	movs	r3, #11
   d5bba:	8183      	strh	r3, [r0, #12]
   d5bbc:	2201      	movs	r2, #1
   d5bbe:	2300      	movs	r3, #0
   d5bc0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5bc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5bc6:	2200      	movs	r2, #0
   d5bc8:	611c      	str	r4, [r3, #16]
   d5bca:	615a      	str	r2, [r3, #20]
   d5bcc:	bd38      	pop	{r3, r4, r5, pc}
   d5bce:	bf00      	nop
   d5bd0:	2003e534 	.word	0x2003e534
   d5bd4:	abcd330e 	.word	0xabcd330e
   d5bd8:	e66d1234 	.word	0xe66d1234
   d5bdc:	0005deec 	.word	0x0005deec

000d5be0 <strdup>:
   d5be0:	4b02      	ldr	r3, [pc, #8]	; (d5bec <strdup+0xc>)
   d5be2:	4601      	mov	r1, r0
   d5be4:	6818      	ldr	r0, [r3, #0]
   d5be6:	f000 b803 	b.w	d5bf0 <_strdup_r>
   d5bea:	bf00      	nop
   d5bec:	2003e534 	.word	0x2003e534

000d5bf0 <_strdup_r>:
   d5bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5bf2:	4604      	mov	r4, r0
   d5bf4:	4608      	mov	r0, r1
   d5bf6:	460d      	mov	r5, r1
   d5bf8:	f000 f80f 	bl	d5c1a <strlen>
   d5bfc:	1c42      	adds	r2, r0, #1
   d5bfe:	4611      	mov	r1, r2
   d5c00:	4620      	mov	r0, r4
   d5c02:	9201      	str	r2, [sp, #4]
   d5c04:	f7fe fd64 	bl	d46d0 <_malloc_r>
   d5c08:	4604      	mov	r4, r0
   d5c0a:	b118      	cbz	r0, d5c14 <_strdup_r+0x24>
   d5c0c:	9a01      	ldr	r2, [sp, #4]
   d5c0e:	4629      	mov	r1, r5
   d5c10:	f7ff ffac 	bl	d5b6c <memcpy>
   d5c14:	4620      	mov	r0, r4
   d5c16:	b003      	add	sp, #12
   d5c18:	bd30      	pop	{r4, r5, pc}

000d5c1a <strlen>:
   d5c1a:	4603      	mov	r3, r0
   d5c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c20:	2a00      	cmp	r2, #0
   d5c22:	d1fb      	bne.n	d5c1c <strlen+0x2>
   d5c24:	1a18      	subs	r0, r3, r0
   d5c26:	3801      	subs	r0, #1
   d5c28:	4770      	bx	lr
	...

000d5c2c <__register_exitproc>:
   d5c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5c30:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5cec <__register_exitproc+0xc0>
   d5c34:	4606      	mov	r6, r0
   d5c36:	f8d8 0000 	ldr.w	r0, [r8]
   d5c3a:	461f      	mov	r7, r3
   d5c3c:	460d      	mov	r5, r1
   d5c3e:	4691      	mov	r9, r2
   d5c40:	f000 f856 	bl	d5cf0 <__retarget_lock_acquire_recursive>
   d5c44:	4b25      	ldr	r3, [pc, #148]	; (d5cdc <__register_exitproc+0xb0>)
   d5c46:	681c      	ldr	r4, [r3, #0]
   d5c48:	b934      	cbnz	r4, d5c58 <__register_exitproc+0x2c>
   d5c4a:	4c25      	ldr	r4, [pc, #148]	; (d5ce0 <__register_exitproc+0xb4>)
   d5c4c:	601c      	str	r4, [r3, #0]
   d5c4e:	4b25      	ldr	r3, [pc, #148]	; (d5ce4 <__register_exitproc+0xb8>)
   d5c50:	b113      	cbz	r3, d5c58 <__register_exitproc+0x2c>
   d5c52:	681b      	ldr	r3, [r3, #0]
   d5c54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d5c58:	6863      	ldr	r3, [r4, #4]
   d5c5a:	2b1f      	cmp	r3, #31
   d5c5c:	dd07      	ble.n	d5c6e <__register_exitproc+0x42>
   d5c5e:	f8d8 0000 	ldr.w	r0, [r8]
   d5c62:	f000 f847 	bl	d5cf4 <__retarget_lock_release_recursive>
   d5c66:	f04f 30ff 	mov.w	r0, #4294967295
   d5c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5c6e:	b34e      	cbz	r6, d5cc4 <__register_exitproc+0x98>
   d5c70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5c74:	b988      	cbnz	r0, d5c9a <__register_exitproc+0x6e>
   d5c76:	4b1c      	ldr	r3, [pc, #112]	; (d5ce8 <__register_exitproc+0xbc>)
   d5c78:	b923      	cbnz	r3, d5c84 <__register_exitproc+0x58>
   d5c7a:	f8d8 0000 	ldr.w	r0, [r8]
   d5c7e:	f000 f838 	bl	d5cf2 <__retarget_lock_release>
   d5c82:	e7f0      	b.n	d5c66 <__register_exitproc+0x3a>
   d5c84:	f44f 7084 	mov.w	r0, #264	; 0x108
   d5c88:	f7fe fcfa 	bl	d4680 <malloc>
   d5c8c:	2800      	cmp	r0, #0
   d5c8e:	d0f4      	beq.n	d5c7a <__register_exitproc+0x4e>
   d5c90:	2300      	movs	r3, #0
   d5c92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d5c96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d5c9a:	6863      	ldr	r3, [r4, #4]
   d5c9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5ca0:	2201      	movs	r2, #1
   d5ca2:	409a      	lsls	r2, r3
   d5ca4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d5ca8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5cac:	4313      	orrs	r3, r2
   d5cae:	2e02      	cmp	r6, #2
   d5cb0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5cb4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5cb8:	bf02      	ittt	eq
   d5cba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d5cbe:	431a      	orreq	r2, r3
   d5cc0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5cc4:	6863      	ldr	r3, [r4, #4]
   d5cc6:	f8d8 0000 	ldr.w	r0, [r8]
   d5cca:	1c5a      	adds	r2, r3, #1
   d5ccc:	3302      	adds	r3, #2
   d5cce:	6062      	str	r2, [r4, #4]
   d5cd0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5cd4:	f000 f80e 	bl	d5cf4 <__retarget_lock_release_recursive>
   d5cd8:	2000      	movs	r0, #0
   d5cda:	e7c6      	b.n	d5c6a <__register_exitproc+0x3e>
   d5cdc:	2003e7e0 	.word	0x2003e7e0
   d5ce0:	2003e754 	.word	0x2003e754
   d5ce4:	00000000 	.word	0x00000000
   d5ce8:	000d4681 	.word	0x000d4681
   d5cec:	2003e598 	.word	0x2003e598

000d5cf0 <__retarget_lock_acquire_recursive>:
   d5cf0:	4770      	bx	lr

000d5cf2 <__retarget_lock_release>:
   d5cf2:	4770      	bx	lr

000d5cf4 <__retarget_lock_release_recursive>:
   d5cf4:	4770      	bx	lr

000d5cf6 <link_code_end>:
	...

000d5cf8 <dynalib_user>:
   d5cf8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5d08:	0000 0000 696c 6867 4c74 7665 6c65 4c00     ....lightLevel.L
   d5d18:	6769 7468 4c20 7665 6c65 203a 6625 0000     ight Level: %f..

000d5d28 <_ZTVN5spark13EthernetClassE>:
	...
   d5d30:	474f 000d 4745 000d 473b 000d 4731 000d     OG..EG..;G..1G..
   d5d40:	4725 000d 4719 000d 556d 000d 5575 000d     %G...G..mU..uU..
   d5d50:	470d 000d 4705 000d 46fb 000d 46f1 000d     .G...G...F...F..
   d5d60:	55a5 000d 7061 0070 5925 252d 2d6d 6425     .U..app.%Y-%m-%d
   d5d70:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5d80:	6d69 0065                                   ime.

000d5d84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5d8c:	4b71 000d 4b77 000d 4bb5 000d 4b85 000d     qK..wK...K...K..
   d5d9c:	4b73 000d                                   sK..

000d5da0 <_ZTV9IPAddress>:
	...
   d5da8:	50b9 000d 50a9 000d 50ab 000d               .P...P...P..

000d5db4 <_ZTV9USBSerial>:
	...
   d5dbc:	5191 000d 51f9 000d 51cf 000d 490d 000d     .Q...Q...Q...I..
   d5dcc:	51c1 000d 5193 000d 51a3 000d 51f3 000d     .Q...Q...Q...Q..
   d5ddc:	51b3 000d 518b 000d                         .Q...Q..

000d5de4 <_ZTV11USARTSerial>:
	...
   d5dec:	5295 000d 5303 000d 52db 000d 490d 000d     .R...S...R...I..
   d5dfc:	52ab 000d 52c7 000d 52b9 000d 52d5 000d     .R...R...R...R..
   d5e0c:	5297 000d 529d 000d                         .R...R..

000d5e14 <_ZTV7TwoWire>:
	...
   d5e1c:	53b1 000d 53fb 000d 53d3 000d 53b3 000d     .S...S...S...S..
   d5e2c:	53db 000d 53e3 000d 53eb 000d 53f3 000d     .S...S...S...S..

000d5e3c <_ZTVN5spark9WiFiClassE>:
	...
   d5e44:	550d 000d 5503 000d 54f9 000d 54af 000d     .U...U...T...T..
   d5e54:	54ed 000d 54e1 000d 556d 000d 5575 000d     .T...T..mU..uU..
   d5e64:	54d5 000d 54cd 000d 54c3 000d 54b9 000d     .T...T...T...T..
   d5e74:	55a5 000d                                   .U..

000d5e78 <_ZTVN5spark12NetworkClassE>:
	...
   d5e80:	552d 000d 5537 000d 5541 000d 554b 000d     -U..7U..AU..KU..
   d5e90:	5555 000d 5561 000d 556d 000d 5575 000d     UU..aU..mU..uU..
   d5ea0:	557d 000d 5589 000d 5591 000d 559b 000d     }U...U...U...U..
   d5eb0:	55a5 000d                                   .U..

000d5eb4 <_ZSt7nothrow>:
	...

000d5eb5 <link_const_variable_data_end>:
   d5eb5:	00          	.byte	0x00
	...

000d5eb8 <link_constructors_location>:
   d5eb8:	000d429d 	.word	0x000d429d
   d5ebc:	000d4759 	.word	0x000d4759
   d5ec0:	000d4781 	.word	0x000d4781
   d5ec4:	000d48fd 	.word	0x000d48fd
   d5ec8:	000d49cd 	.word	0x000d49cd
   d5ecc:	000d49dd 	.word	0x000d49dd
   d5ed0:	000d4a2d 	.word	0x000d4a2d
   d5ed4:	000d5519 	.word	0x000d5519
   d5ed8:	000d5679 	.word	0x000d5679

000d5edc <link_constructors_end>:
   d5edc:	00000000 	.word	0x00000000
